- [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)
  - [Test Summary](#test-summary)
  - [Prerequisites](#prerequisites)
  - [Hardware Requirements](#hardware-requirements)
  - [Test steps](#test-steps)
  
- [ITP/RI/ICMAH/02: Verify ONF portal access for sdran contents with invalid credentials](#itpriicmah02-Verify-ONF-portal-access-for-sdran-contents-with-invalid-credentials)
  - [Test Summary](#test-summary-1)
  - [Prerequisites](#prerequisites-1)
  - [Test steps](#test-steps-1)

- [ITP/RI/ICMAH/03: Verify recovery of single node cluster with Intelligent Connection Management RI from forced reboot](#itpriicmah03-Verify-recovery-of-single-node-cluster-with-Intelligent-Connection-Management-RI-from-forced-reboot)
  - [Test Summary](#test-summary-2)
  - [Prerequisites](#prerequisites-2)
  - [Test steps](#test-steps-2)

- [ITP/RI/ICMAH/04: Verify uninstall and install of Intelligent Connection Management for Automated Handover RI](#itpriicmah04-Verify-uninstall-and-install-of-Intelligent-Connection-Management-for-Automated-Handover-RI)
  - [Test Summary](#test-summary-3)
  - [Prerequisites](#prerequisites-3)
  - [Test steps](#test-steps-3)

- [ITP/RI/ICMAH/05: Delete Intelligent Connection Management application pod and verify its recovery and functionality](#itpriicmah05-Delete-Intelligent-Connection-Management-application-pod-and-verify-its-recovery-and-functionality)
  - [Test Summary](#test-summary-4)
  - [Prerequisites](#prerequisites-4)
  - [Test steps](#test-steps-4)

- [ITP/RI/ICMAH/06: Verify Product key integrity during ICMAH installation](#itpriicmah06-Verify-Product-key-integrity-during-ICMAH-installation)
  - [Test Summary](#test-summary-5)
  - [Prerequisites](#prerequisites-5)
  - [Test steps](#test-steps-5)
  
- [ITP/RI/ICMAH/07: Verify reinstallation of Intelligent Connection Management for Automated Handover RI](#itpriicmah07-Verify-reinstallation-of-Intelligent-Connection-Management-for-Automated-Handover-RI)
  - [Test Summary](#test-summary-6)
  - [Prerequisites](#prerequisites-6)
  - [Test steps](#test-steps-6)

- [ITP/RI/ICMAH/08: Verify ICMAH RI installation with product key of another RI instance](#itpriicmah08-Verify-ICMAH-RI-installation-with-product-key-of-another-RI-instance)
  - [Test Summary](#test-summary-7)
  - [Prerequisites](#prerequisites-7)
  - [Test steps](#test-steps-7)

- [ITP/RI/ICMAH/09: Verify uninstall and install of ICMAH RI with an invalid product key](#itpriicmah09-Verify-uninstall-and-install-of-ICMAH-RI-with-an-invalid-product-key)
  - [Test Summary](#test-summary-8)
  - [Prerequisites](#prerequisites-8)
  - [Test steps](#test-steps-8)

- [ITP/RI/ICMAH/10: Verify uninstall of ICMAH RI followed by an abort signal for previous cleanup instance](#itpriicmah10-Verify-uninstall-of-ICMAH-RI-followed-by-an-abort-signal-for-previous-cleanup-instance)
  - [Test Summary](#test-summary-9)
  - [Prerequisites](#prerequisites-9)
  - [Test steps](#test-steps-9)
  
- [ITP/RI/ICMAH/11: Verify ICMAH RI installation with an invalid credentials for ONF portal after successful install and uninstall cycle](#itpriicmah11-Verify-ICMAH-RI-installation-with-an-invalid-credentials-for-ONF-portal-after-successful-install-and-uninstall-cycle)
  - [Test Summary](#test-summary-10)
  - [Prerequisites](#prerequisites-10)
  - [Test steps](#test-steps-10)
  
- [ITP/RI/ICMAH/12: Verify E2E Latency measurement of CMxApp meets the ORAN KPI using OpenVINO](#itpriicmah12-Verify-E2E-Latency-measurement-of-CMxApp-meets-the-ORAN-KPI-using-OpenVINO)
  - [Test Summary](#test-summary-11)
  - [Prerequisites](#prerequisites-11)
  - [Test steps](#test-steps-11)

- [ITP/RI/ICMAH/13: Verify E2E Latency measurement of CMxApp meets the ORAN KPI using Python](#itpriicmah13-Verify-E2E-Latency-measurement-of-CMxApp-meets-the-ORAN-KPI-using-Python)
  - [Test Summary](#test-summary-12)
  - [Prerequisites](#prerequisites-12)
  - [Test steps](#test-steps-12)
  
- [ITP/RI/ICMAH/14: Verify CMxApp deployment is per the platform capabilities advertised by NFD feature](#itpriicmah14-Verify-CMxApp-deployment-is-per-the-platform-capabilities-advertised-by-NFD-feature)
  - [Test Summary](#test-summary-13)
  - [Prerequisites](#prerequisites-13)
  - [Test steps](#test-steps-13)
 
## ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification

### Test Summary

Intelligent Connection Management xApp is developed based on the O-RAN network architecture to optimize user association and load balancing to improve the quality of service (QoS) requirements of a user equipment (UE). The connection management is formulated as a combinatorial graph optimization problem. A deep reinforcement learning (DRL) solution is proposed to learn the weights of a graph neural network (GNN) for an optimal UE association.<br>
The Intel® Smart Edge Open Developer Experience Kit platform infrastructure is used to deploy the SD-RAN 1.3 release version of RIC pod, RAN Simulator pod, and Intelligent Connection Management xApp pod. The CM xApp interacts with the RIC to fetch network data from RAN simulator and performs handover of UEs across different cells.

### Prerequisites

- <a href="https://wiki.ith.intel.com/display/ESSE/Enable+Intel+SGX+in+BIOS">Enable SGX in BIOS</a>

- Configure DCAP service (once, if not available):
  - Subscribe to the Intel PCS 
  
    (https://www.intel.com/content/www/us/en/developer/articles/guide/intel-software-guard-extensions-data-center-attestation-primitives-quick-install-guide.html#inpage-nav-2-undefined)

  - Set up the Intel PCCS 
  
    (https://www.intel.com/content/www/us/en/developer/articles/guide/intel-software-guard-extensions-data-center-attestation-primitives-quick-install-guide.html#inpage-nav-2-1)
  
-  <a href="https://wiki.ith.intel.com/display/ESSE/CM+xApp+on+SE-O+DEK+21.12#CMxApponSEODEK21.12-StepstoStandaloneVMInstanceanddeployDEK">Install Verification Controller</a>
    
- Intel® Smart Edge Open Developer Experience Kit deployed in target platform - https://github.com/intel-innersource/applications.services.smart-edge-open.docs/blob/main/experience-kits/developer-experience-kit.md
- ONF credentials in order to get access to the SD-RAN release
      https://opennetworking.org/join-onf/ gives the membership details
      https://opennetworking.org/contact/ Fill in the form for membership query.<br> Once a company is a member of ONF, all employees of that company have access to all membership privileges.
- Recommended to use docker pro account mapped to private docker images hosted for this installation.
   
- BIOS version on target system must be 1.3.8 or high. To upgrade the BIOS link please follow the below link.
  
  https://wiki.ith.intel.com/display/ESSE/Updating+DELL+PowerEdge+R750+BIOS
 
- refer following link for ESP-ISO ESP w/ Ubuntu OS image creation
-(https://github.com/intel-innersource/applications.services.smart-edge-open.test-validation/blob/main/test_plans/se-o/esp/singlenode/ts01-esp-platform-setup-singlenode.md#itpseoespsingle0102-deploy-esp-on-host-machine-with-ubuntu-provision-target-machine-with-ubuntu-profile-using-usb-boot-method)

### Hardware Requirements

Intel® Smart Edge Open Node

- Intel® Xeon® scalable processor
- At least 64 GB RAM
- At least 265 GB hard drive
- An Internet connection
- Ubuntu* 20.04 LTS

### Test Steps

**Step 1 : Install the Reference Implementation**

1. Download the Reference Implementation ESH package from the following link with required specifications:
   https://recipeconfigurator-quiet-toucan.apps1-bg-int.icloud.intel.com/iot/edgesoftwarehub/download/home/ri/Intelligent_Connection_Management

    Select and download required version to be tested as shown below:
   ![image](https://github.com/intel-innersource/applications.services.smart-edge-open.test-validation/assets/93578898/a774d64f-89dd-4e9e-818c-7cdd7ea87aa7)

    
2. Once your download is complete, open a new terminal as a non root user ex: "smartedge-open" and copy the zip package to the target system /home/smartedge-open folder.

    ```shell
    $ mv <path-of-downloaded-directory>/Intelligent_Connection_Management.zip /home/smartedge-open/
    ```

3. Unzip the RI package and change permission of 'edgesoftware' executable file

    ```shell
    $ cd /home/smartedge-open
    $ unzip Intelligent_Connection_Management_for_Automated_Handover.zip 
    $ cd Intelligent_Connection_Management
    $ chmod 755 edgesoftware 
    ```

4. Run the command below to install the Reference Implementation:

    ```shell
    $ ./edgesoftware install
    ```

5. During the installation, user shall be prompted for the Product Key. The Product Key is contained in the email you received from Intel confirming your download.
 
   ```shell
   smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware install
   Please enter the Product Key. The Product Key is contained in the email you received from Intel confirming your download:  <Product Key>
   Starting the setup...
   ESB CLI version: 2021.4
   Target OS: Ubuntu 20.04
   Python version: 3.8.10
   Checking Internet connection
   Connected to the Internet
   Validating product key
   Successfully validated Product Key
   Checking for prerequisites
   ```

    ```shell
    --------Succesfuly installed prerequisites--------
    All dependencies met
    -------------------SYSTEM INFO--------------------
    Package Name: Intelligent Connection Management for Automated Handover 2.0.0
    Product Name: Dell Inc. PowerEdge R750
    CPU SKU: Intel(R) Xeon(R) Gold 6338N CPU @ 2.20GHz
    Memory Size: 504 GB
    Operating System: Ubuntu 20.04.2 LTS
    Kernel Version: 5.13.0-27-generic
    Accelerator: None
    CPU Utilization: 1.2%
    Available Disk Space: 433 GB
    Starting installation
    Downloading modules...
    Downloading component esb_common
    100%|██████████████████████████████████████████████████████████████████████████████████████████████████████| 44.0M/44.0M [00:43<00:00, 1.01MiB/s]
    Module validation passed for 6022bd8ccc7449002afdbedd
    Successfully downloaded module esb_common
    Downloading component Intelligent_Connection_Management_for_Automated_Handover
    100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 1.95M/1.95M [00:02<00:00, 951kiB/s]
    Module validation passed for 619b8bceff6f230021e4409e
    Successfully downloaded module Intelligent_Connection_Management_for_Automated_Handover
    Downloading modules completed...
    Installing shared module 'esb_common'
    Unzipping the shared module 'esb_common'...
    running install
    running bdist_egg
    running egg_info
    creating esb_common.egg-info
    writing esb_common.egg-info/PKG-INFO
    writing dependency_links to esb_common.egg-info/dependency_links.txt
    writing top-level names to esb_common.egg-info/top_level.txt
    writing manifest file 'esb_common.egg-info/SOURCES.txt'
    reading manifest file 'esb_common.egg-info/SOURCES.txt'
    writing manifest file 'esb_common.egg-info/SOURCES.txt'
    installing library code to build/bdist.linux-x86_64/egg
    ```

    ```shell
    creating build
    creating build/bdist.linux-x86_64
    creating build/bdist.linux-x86_64/egg
    creating build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    zip_safe flag not set; analyzing archive contents...
    creating dist
    creating 'dist/esb_common-0.1-py3.8.egg' and adding 'build/bdist.linux-x86_64/egg' to it
    removing 'build/bdist.linux-x86_64/egg' (and everything under it)
    Processing esb_common-0.1-py3.8.egg
    Copying esb_common-0.1-py3.8.egg to /usr/local/lib/python3.8/dist-packages
    Adding esb-common 0.1 to easy-install.pth file

    Installed /usr/local/lib/python3.8/dist-packages/esb_common-0.1-py3.8.egg
    Processing dependencies for esb-common==0.1
    Finished processing dependencies for esb-common==0.1
    Successfully installed shared module 'esb_common'.
    Installing Lanternrock SDK
    Successfully installed Lanternrock SDK.
    Unzipping the module Intelligent_Connection_Management_for_Automated_Handover...
    Modules to be installed by package are ['Intelligent_Connection_Management_for_Automated_Handover']
    Installing Intelligent_Connection_Management_for_Automated_Handover
    Verifying SE Node (xx.xxx.xxx.xxx)                  [..................................................] 100%


    Before installing freshly, deleting partially installed pods if any ...
    Uninstalling CM Xapp This might take upto 5 minutes.
    Cleaning up CM Xapp quietly                        [..................................................] 100%
    Installing CM Xapp dependencies on SE Node . . .   [..........................................        ]  84%  00:00:16
    Successfully installed: SDRAN
    ```

8. When the installation is complete, you shall see the message **Installation of package complete** with the installation status for each module.

    ```shell
    CM Xapp installation started. This might take upto 5-10 mins for getting docker images from registry
    Installing CM Xapp                                 [..................................................] 100%
    Successfully installed: CM Xapp


    Verifying CM Xapp installation in (xx.xxx.xxx.xxx)  [..................................................] 100%
    Successfully installed Intelligent_Connection_Management_for_Automated_Handover took 2 minutes 58.31 seconds
    Installation of package complete
    ***Recommended to reboot system after installation***
    +--------------------------+----------------------------------------------------------+---------+
    |            Id            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 619b8bceff6f230021e4409e | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    ```
    **Note:** Installation logs are available at path: /var/log/esb-cli/Intelligent_Connection_Management_for_Automated_Handover_2.0.0/Intelligent_Connection_Management_for_Automated_Handover/install.log

9. If Intel® Smart Edge Open Developer Experience Kit is installed successfully along with the RI, running the following command should show output similar to the example below. All the pods should be either in the 'Running' or 'Completed' stage. 
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl get pods -A
    NAMESPACE          NAME                                                         READY   STATUS    RESTARTS      AGE
    cert-manager       cert-manager-cainjector-7db56c5fd6-tl549                     1/1     Running   0             29h
    cert-manager       cert-manager-f5c794b65-jqgn4                                 1/1     Running   0             29h
    cert-manager       cert-manager-webhook-6c86d79f7c-xlphm                        1/1     Running   0             29h
    harbor             harbor-app-chartmuseum-7dc685c9cd-d25c2                      1/1     Running   0             29h
    harbor             harbor-app-core-68c9c9f58c-hmjmj                             1/1     Running   4             29h
    harbor             harbor-app-database-0                                        1/1     Running   0             29h
    harbor             harbor-app-jobservice-78745b778f-gm6wp                       1/1     Running   1 (29h ago)   29h
    harbor             harbor-app-nginx-74cfb9b674-rxkv8                            1/1     Running   0             29h
    harbor             harbor-app-notary-server-855c799fbb-p4rz8                    1/1     Running   4 (29h ago)   29h
    harbor             harbor-app-notary-signer-5cfc7577d-5xphv                     1/1     Running   5 (29h ago)   29h
    harbor             harbor-app-portal-6d6bcdc8bf-sjz4q                           1/1     Running   0             29h
    harbor             harbor-app-redis-0                                           1/1     Running   0             29h
    harbor             harbor-app-registry-599949cb8b-hs2f9                         2/2     Running   0             29h
    harbor             harbor-app-trivy-0                                           1/1     Running   0             29h
    kube-system        atomix-controller-6767f468cc-p9d2g                           1/1     Running   0             24m
    kube-system        atomix-raft-storage-controller-85db5888f6-lmxtl              1/1     Running   0             24m
    kube-system        calico-kube-controllers-654b987fd9-m2k7p                     1/1     Running   1 (29h ago)   30h
    kube-system        calico-node-wvpk9                                            1/1     Running   1 (29h ago)   30h
    kube-system        coredns-78fcd69978-rmqtr                                     1/1     Running   1 (29h ago)   30h
    kube-system        coredns-78fcd69978-zrhj4                                     1/1     Running   1 (29h ago)   30h
    kube-system        etcd-xxxxxx                                                  1/1     Running   2 (29h ago)   30h
    kube-system        kube-apiserver-xxxxxx                                        1/1     Running   1 (29h ago)   30h
    kube-system        kube-controller-manager-xxxxxx                               1/1     Running   1 (29h ago)   30h
    kube-system        kube-proxy-nng5g                                             1/1     Running   1 (29h ago)   30h
    kube-system        kube-scheduler-xxxxxx                                        1/1     Running   1 (29h ago)   30h
    kube-system        onos-operator-app-6864f6f77c-hhqgr                           1/1     Running   0             24m
    kube-system        onos-operator-config-7569c46b76-rxnfq                        1/1     Running   0             24m
    kube-system        onos-operator-topo-7c68bc4d7-4t272                           1/1     Running   0             24m
    smartedge-apps     cm-xapp-58557c8f56-hsq5j                                     2/2     Running   0             23m
    smartedge-apps     onos-cli-764d9697fb-4tf9l                                    1/1     Running   0             23m
    smartedge-apps     onos-consensus-store-0                                       1/1     Running   0             23m
    smartedge-apps     onos-e2t-df496c8cd-d9csb                                     3/3     Running   0             23m
    smartedge-apps     onos-topo-79f7c5c54d-qzvnq                                   3/3     Running   0             23m
    smartedge-apps     onos-uenib-6f7466c87f-xmcl2                                  3/3     Running   0             23m
    smartedge-apps     ran-simulator-84f849f6d6-fjqzt                               1/1     Running   0             23m
    smartedge-system   nfd-release-node-feature-discovery-master-65db7b5549-jb28v   1/1     Running   0             29h
    smartedge-system   nfd-release-node-feature-discovery-worker-7mhqb              1/1     Running   0             29h
    telemetry          cadvisor-b2npn                                               2/2     Running   0             29h
    telemetry          collectd-k96wk                                               3/3     Running   0             29h
    telemetry          grafana-68bf7b4cd9-nmzhs                                     3/3     Running   0             29h
    telemetry          prometheus-node-exporter-4k5gx                               1/1     Running   0             29h
    telemetry          prometheus-server-55b69684c4-rzqg4                           3/3     Running   0             29h
    telemetry          statsd-exporter-99f9c6d67-zpfsq                              2/2     Running   0             29h
    ```

  
**Step 2 : Verify the SD-RAN ran simulator pods for UEs & Cells**

1. Run "kubectl get pods -n smartedge-apps" to get the <onos cli> pod name.
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl get pods -n smartedge-apps | grep onos-cli
    onos-cli-764d9697fb-4tf9l        1/1     Running   0          40m
    ```
  
2. Verify the UE count with command below, output should show '140'

    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-4tf9l -- onos ransim get ueCount
    140
    ```
  
3. Run the command below to see all the 100 UEs with their RRC states
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-4tf9l -- onos ransim
    get ues
    IMSI             Serving Cell     CRNTI      Admitted   RRC
    7493236          13842601454c003  90157      false      RRCSTATUS_CONNECTED
    6631874          13842601454c001  90171      false      RRCSTATUS_IDLE
    8396655          13842601454c002  90200      false      RRCSTATUS_CONNECTED
    7157420          13842601454c007  90214      false      RRCSTATUS_CONNECTED
    5986146          13842601454c003  90216      false      RRCSTATUS_CONNECTED
    1675424          13842601454c002  90169      false      RRCSTATUS_IDLE
    8024698          13842601454c003  90226      false      RRCSTATUS_IDLE
    5866553          13842601454c002  90236      false      RRCSTATUS_CONNECTED
    9759066          13842601454c002  90244      false      RRCSTATUS_IDLE
    1970470          13842601454c002  90153      false      RRCSTATUS_IDLE
    4185287          13842601454c001  90173      false      RRCSTATUS_CONNECTED
    3955715          13842601454c001  90208      false      RRCSTATUS_IDLE
    8895920          13842601454c007  90259      false      RRCSTATUS_IDLE
    2426307          13842601454c003  90161      false      RRCSTATUS_IDLE
    8984611          13842601454c002  90168      false      RRCSTATUS_CONNECTED
    8554684          13842601454c002  90209      false      RRCSTATUS_IDLE
    2191696          13842601454c002  90240      false      RRCSTATUS_CONNECTED
    7342345          13842601454c002  90264      false      RRCSTATUS_CONNECTED
    6652246          13842601454c002  90129      false      RRCSTATUS_IDLE
    4505114          13842601454c001  90203      false      RRCSTATUS_CONNECTED
    5198284          13842601454c002  90217      false      RRCSTATUS_IDLE
    8482175          13842601454c002  90228      false      RRCSTATUS_IDLE
    9665370          13842601454c002  90231      false      RRCSTATUS_IDLE
    3413459          13842601454c002  90154      false      RRCSTATUS_IDLE
    2538881          13842601454c002  90176      false      RRCSTATUS_IDLE
    7706468          13842601454c005  90230      false      RRCSTATUS_IDLE
    2839374          13842601454c007  90232      false      RRCSTATUS_IDLE
    1819513          13842601454c007  90140      false      RRCSTATUS_IDLE
    1898832          13842601454c002  90183      false      RRCSTATUS_IDLE
    9798579          13842601454c002  90223      false      RRCSTATUS_IDLE
    7978754          13842601454c003  90225      false      RRCSTATUS_IDLE
    1291729          13842601454c003  90234      false      RRCSTATUS_CONNECTED
    7490008          13842601454c003  90135      false      RRCSTATUS_CONNECTED
    6750834          13842601454c003  90162      false      RRCSTATUS_CONNECTED
    8116395          13842601454c003  90187      false      RRCSTATUS_IDLE
    1803553          13842601454c003  90202      false      RRCSTATUS_CONNECTED
    5816184          13842601454c003  90243      false      RRCSTATUS_IDLE
    2537567          13842601454c002  90131      false      RRCSTATUS_IDLE
    3777455          13842601454c002  90132      false      RRCSTATUS_IDLE
    5204815          13842601454c001  90188      false      RRCSTATUS_IDLE
    4135269          13842601454c003  90210      false      RRCSTATUS_CONNECTED
    9614575          13842601454c007  90137      false      RRCSTATUS_CONNECTED
    8018913          13842601454c007  90206      false      RRCSTATUS_CONNECTED
    7370592          13842601454c003  90235      false      RRCSTATUS_IDLE
    6046447          13842601454c003  90252      false      RRCSTATUS_IDLE
    1577385          13842601454c002  90172      false      RRCSTATUS_IDLE
    8365625          13842601454c001  90233      false      RRCSTATUS_CONNECTED
    7810865          13842601454c002  90256      false      RRCSTATUS_CONNECTED
    7488894          13842601454c002  90130      false      RRCSTATUS_CONNECTED
    ```
  
4. Run the command below to verify the 5 Cells with TxDB, Neighbors details 
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-4tf9l -- onos ransim get cells
    NCGI                 #UEs Max UEs    TxDB       Lat       Lng Azimuth     Arc   A3Offset     TTT  A3Hyst PCellOffset FreqOffset      PCI    Color Idle Conn Neighbors(NCellOffset)
    13842601454c002         0   99999   40.00    12.940    77.697       0     120          0       0       0          0          0      102    green   33,   21, 13842601454c003(0),13842601454c004(0),13842601454c007(0)
    13842601454c003         0   99999   40.00    12.940    77.697     120     120          0       0       0          0          0      103    green   36,   20, 13842601454c001(0),13842601454c002(0),13842601454c004(0)
    13842601454c004         0   99999   40.00    12.940    77.697     240     120          0       0       0          0          0      104    green    0,    0, 13842601454c001(0),13842601454c002(0),13842601454c003(0),13842601454c005(0),13842601454c006(0),13842601454c007(0)
    13842601454c006         0   99999   40.00    12.942    77.696     120     120          0       0       0          0          0      106    green    0,    0, 13842601454c001(0),13842601454c004(0),13842601454c005(0)
    13842601454c005         0   99999   40.00    12.942    77.696       0     120          0       0       0          0          0      105    green    5,    2, 13842601454c004(0),13842601454c006(0),13842601454c007(0)
    13842601454c007         0   99999   40.00    12.942    77.698     120     120          0       0       0          0          0      107    green    7,    3, 13842601454c002(0),13842601454c004(0),13842601454c005(0)
    13842601454c001         0   99999   40.00    12.940    77.695       0     120          0       0       0          0          0      101    green    6,    7, 13842601454c003(0),13842601454c004(0),13842601454c006(0)
    ```
  
5. Verify the subscription details with command below
 
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-4tf9l -- onos e2t list subscriptions
    Subscription ID                              Revision   Service Model ID   E2 NodeID   Encoding   Phase               State
    bab81642e0e6d82c57a54060feeabe6f:e2:1/5155   139        oran-e2sm-mho:v1   e2:1/5155   ASN1_PER   SUBSCRIPTION_OPEN   SUBSCRIPTION_COMPLETE
    14d96d88f13bba8ba7889bdf532c059d:e2:1/5158   79         oran-e2sm-mho:v1   e2:1/5158   ASN1_PER   SUBSCRIPTION_OPEN   SUBSCRIPTION_COMPLETE
    14d96d88f13bba8ba7889bdf532c059d:e2:1/5156   121        oran-e2sm-mho:v1   e2:1/5156   ASN1_PER   SUBSCRIPTION_OPEN   SUBSCRIPTION_COMPLETE
    76d79858affefc5ecef79683581f1561:e2:1/5157   129        oran-e2sm-mho:v1   e2:1/5157   ASN1_PER   SUBSCRIPTION_OPEN   SUBSCRIPTION_COMPLETE
    ```

6. To check the subscription requests to the e2 node, run the following command on the app logs.
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl get pods -n smartedge-apps | grep cm
    cm-xapp-58557c8f56-hsq5j         2/2     Running   0          47m
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl logs  cm-xapp-58557c8f56-hsq5j -n smartedge-apps -c cm-xapp | grep "Create subscription successful"
    2022-03-10T11:54:29.191Z        INFO    xapp/client     pkg/client.go:285       Create subscription successful for nodeID %!(EXTRA topo.ID=e2:1/5158, string= with subscription name , string=onos-cm-xapp-subscription-MHO_TRIGGER_TYPE_PERIODIC)
    2022-03-10T11:54:29.212Z        INFO    xapp/client     pkg/client.go:285       Create subscription successful for nodeID %!(EXTRA topo.ID=e2:1/5158, string= with subscription name , string=onos-cm-xapp-subscription-MHO_TRIGGER_TYPE_UPON_CHANGE_RRC_STATUS)
    2022-03-10T11:54:29.316Z        INFO    xapp/client     pkg/client.go:285       Create subscription successful for nodeID %!(EXTRA topo.ID=e2:1/5158, string= with subscription name , string=onos-cm-xapp-subscription-MHO_TRIGGER_TYPE_UPON_RCV_MEAS_REPORT)
    2022-03-10T11:54:29.371Z        INFO    xapp/client     pkg/client.go:285       Create subscription successful for nodeID %!(EXTRA topo.ID=e2:1/5156, string= with subscription name , string=onos-cm-xapp-subscription-MHO_TRIGGER_TYPE_PERIODIC)
    ```
  
7. Verify the CM xApp logs to confirm that the App is issuing the handover requests.<br>This command needs to be run after 5 mins of starting the Application. 

    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl logs cm-xapp-58557c8f56-hsq5j -n smartedge-apps -c cm-xapp | grep "Calling control req"
    03/10/2022 11:56:29 AM Calling control req no 1 for UE : 1551030 Serving cell: 13842601454c001 target_cell 13842601454c005
    03/10/2022 11:56:29 AM Calling control req no 2 for UE : 8365625 Serving cell: 13842601454c006 target_cell 13842601454c005
    03/10/2022 11:56:39 AM Calling control req no 3 for UE : 6450589 Serving cell: 13842601454c007 target_cell 13842601454c004
    03/10/2022 11:56:55 AM Calling control req no 4 for UE : 3876973 Serving cell: 13842601454c007 target_cell 13842601454c002
    03/10/2022 11:57:02 AM Calling control req no 5 for UE : 8365625 Serving cell: 13842601454c005 target_cell 13842601454c002
    03/10/2022 11:57:08 AM Calling control req no 6 for UE : 3876973 Serving cell: 13842601454c002 target_cell 13842601454c003
    03/10/2022 11:57:24 AM Calling control req no 7 for UE : 6450589 Serving cell: 13842601454c004 target_cell 13842601454c007
    03/10/2022 11:57:26 AM Calling control req no 8 for UE : 1555774 Serving cell: 13842601454c005 target_cell 13842601454c002
    03/10/2022 11:57:30 AM Calling control req no 9 for UE : 4505114 Serving cell: 13842601454c001 target_cell 13842601454c002
    03/10/2022 11:57:33 AM Calling control req no 10 for UE : 3876973 Serving cell: 13842601454c003 target_cell 13842601454c002
    ```
  
8. Verify the RAN Sim logs to confirm whether the handover requests issued from xApp are reaching the Ran Simulator.<br>This command needs to be run after 5 mins of starting the Application
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl get pods -n smartedge-apps | grep ran
    ran-simulator-84f849f6d6-fjqzt   1/1     Running   0          60m
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl logs -n smartedge-apps ran-simulator-84f849f6d6-fjqzt | grep "HO is done successfully"
    2022-03-10T11:54:01.934Z        INFO    mobility/driver mobility/driver.go:344  HO is done successfully: 4001076 to &{87893173159116807 87893173159116807 0}
    2022-03-10T11:54:03.934Z        INFO    mobility/driver mobility/driver.go:344  HO is done successfully: 8116395 to &{87893173159116803 87893173159116803 0}
    2022-03-10T11:54:03.934Z        INFO    mobility/driver mobility/driver.go:344  HO is done successfully: 8558350 to &{87893173159116803 87893173159116803 0}
    2022-03-10T11:54:04.934Z        INFO    mobility/driver mobility/driver.go:344  HO is done successfully: 7493236 to &{87893173159116804 87893173159116804 0}
    2022-03-10T11:54:04.935Z        INFO    mobility/driver mobility/driver.go:344  HO is done successfully: 1919577 to &{87893173159116804 87893173159116804 0}
    2022-03-10T11:54:05.935Z        INFO    mobility/driver mobility/driver.go:344  HO is done successfully: 4001076 to &{87893173159116803 87893173159116803 0}
    2022-03-10T11:54:06.933Z        INFO    mobility/driver mobility/driver.go:344  HO is done successfully: 9665370 to &{87893173159116803 87893173159116803 0}
    ```
   
9. Verify whether network policy for Intelligent Connection Management for Automated Handover RI has been created
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl get networkpolicies.networking.k8s.io -A -o wide
    NAMESPACE          NAME                                   POD-SELECTOR                                    AGE
    default            block-all-ingress                      <none>                                          30h
    harbor             harbor-network-policy                  app=harbor,component=nginx,release=harbor-app   30h
    kube-system        allow-atomix-controller                name=atomix-controller                          64m
    kube-system        allow-atomix-raft-storage-controller   name=atomix-raft-storage                        64m
    kube-system        allow-onos-operator-app                name=onos-operator-app                          64m
    kube-system        allow-onos-operator-config             name=onos-operator-config                       64m
    kube-system        allow-onos-operator-topo               name=onos-operator-topo                         64m
    smartedge-apps     allow-cm-xapp                          service=cm-xapp                                 64m
    smartedge-apps     allow-onos-ingress                     app=onos                                        64m
    smartedge-apps     deny-from-other-namespaces             <none>                                          30h
    smartedge-apps     onos-consensus-store-0                 app=atomix                                      64m
    smartedge-system   block-all-ingress                      <none>                                          30h
    smartedge-system   nfd-to-nfd                             app.kubernetes.io/name=node-feature-discovery   29h
    ```
  
**Step 4 : Uninstall the Intelligent Connection Management for Automated Handover RI**
  
To uninstall the list of modules deployed by this Reference Implementation, run the following commands.
Note: This will remove all the running pods and the data and configuration stored in the device.

1. To list the package modules, run the below command

    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware list
   +--------------------------+----------------------------------------------------------+---------+
    |            ID            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+

    ```
2. To uninstall the individual module, run the following command with respective module ID
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware uninstall 61d80982d534850021b1422d
    Components to be uninstalled are :['Intelligent_Connection_Management_for_Automated_Handover']
    Uninstalling Intelligent_Connection_Management_for_Automated_Handover
    Uninstalling CM Xapp This might take upto 5 minutes.
    Cleaning up CM Xapp                                [............                                      ]  25%
    Successfully removed cm xapp from machine
    Cleaning up CM Xapp                                [.........................                         ]  50%  00:00:11
    Successfully removed sdran from machine
    Cleaning up CM Xapp                                [.....................................             ]  75%  00:00:07
    Successfully removed network policy from machine
    Cleaning up CM Xapp                                [..................................................] 100%
    Successfully uninstalled Intelligent_Connection_Management_for_Automated_Handover took 30.95 seconds
    Uninstall Finished
    +--------------------------+----------------------------------------------------------+---------+
    |            Id            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    ```

## ITP/RI/ICMAH/02: Verify ONF portal access for sdran contents with invalid credentials

### Test Summary
  
Verify the ONF portal access with invalid credentials for sdran helm chart during Intelligent Connection Management for Automated Handover RI installation.
  
### Prerequisites
  
Bringup the RI as per [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)
  
### Test Steps

1. Download the RI package from ESH portal and start installation per steps in pre-requisites section.
  
2. During the installation, the user shall be prompted to enter ONF credentials<br>Enter Invalid credentials and verify the script aborts with error as shown below -

    ```shell
    Please contact ONF(https://opennetworking.org/contact/) for username and password credentials that allow access to the sdran helm chart repo.
    Enter sdran username: intel
    Enter sdran password: <Invalid Password>
    Installing CM Xapp dependencies on SE Node . . .   [...........                                       ]  23%  00:01:04
    Unable to add sdran helm chart

    ERROR:
    Unable to add sdran helm chart helm repo add sdran --username intel --password wrong https://sdrancharts.onosproject.org
    Failed to install Intelligent_Connection_Management_for_Automated_Handover took 1 minutes 28.07 seconds
    Installation of package complete
    +--------------------------+----------------------------------------------------------+--------+
    |            Id            |                          Module                          | Status |
    +--------------------------+----------------------------------------------------------+--------+
    | 619b8bceff6f230021e4409e | Intelligent Connection Management for Automated Handover | FAILED |
    +--------------------------+----------------------------------------------------------+--------+
    ```
  Note: SDRAN credentials are not needed for the latest package

## ITP/RI/ICMAH/03: Verify recovery of single node cluster with Intelligent Connection Management RI from forced reboot

### Test Summary
  
Verify the platform recovery of single node k8s host with Intelligent Connection Management for Automated Handover RI from forced reboot. All pods/service are expected to run and RAN simulator should provide UE/Cells details.
  
### Prerequisites
  
Bringup the RI as per [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)
  
### Test Steps
  
1. Force reboot the Single node k8s host where the Intelligent Connection Management for Automated Handover RI has been installed.<br>Post reboot cycle of the host, the pods status should prompt either 'Running' or 'Completed' as shown below -
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl get pods -A
    NAMESPACE          NAME                                                         READY   STATUS    RESTARTS      AGE
    cert-manager       cert-manager-cainjector-7db56c5fd6-tl549                     1/1     Running   0             30h
    cert-manager       cert-manager-f5c794b65-jqgn4                                 1/1     Running   0             30h
    cert-manager       cert-manager-webhook-6c86d79f7c-xlphm                        1/1     Running   0             30h
    harbor             harbor-app-chartmuseum-7dc685c9cd-d25c2                      1/1     Running   0             30h
    harbor             harbor-app-core-68c9c9f58c-hmjmj                             1/1     Running   4             30h
    harbor             harbor-app-database-0                                        1/1     Running   0             30h
    harbor             harbor-app-jobservice-78745b778f-gm6wp                       1/1     Running   1 (30h ago)   30h
    harbor             harbor-app-nginx-74cfb9b674-rxkv8                            1/1     Running   0             30h
    harbor             harbor-app-notary-server-855c799fbb-p4rz8                    1/1     Running   4 (30h ago)   30h
    harbor             harbor-app-notary-signer-5cfc7577d-5xphv                     1/1     Running   5 (30h ago)   30h
    harbor             harbor-app-portal-6d6bcdc8bf-sjz4q                           1/1     Running   0             30h
    harbor             harbor-app-redis-0                                           1/1     Running   0             30h
    harbor             harbor-app-registry-599949cb8b-hs2f9                         2/2     Running   0             30h
    harbor             harbor-app-trivy-0                                           1/1     Running   0             30h
    kube-system        atomix-controller-6767f468cc-ztzxx                           1/1     Running   0             18m
    kube-system        atomix-raft-storage-controller-85db5888f6-qzlhh              1/1     Running   0             17m
    kube-system        calico-kube-controllers-654b987fd9-m2k7p                     1/1     Running   1 (30h ago)   31h
    kube-system        calico-node-wvpk9                                            1/1     Running   1 (30h ago)   31h
    kube-system        coredns-78fcd69978-rmqtr                                     1/1     Running   1 (30h ago)   31h
    kube-system        coredns-78fcd69978-zrhj4                                     1/1     Running   1 (30h ago)   31h
    kube-system        etcd-xxxxxx                                                  1/1     Running   2 (30h ago)   31h
    kube-system        kube-apiserver-xxxxxx                                        1/1     Running   1 (30h ago)   31h
    kube-system        kube-controller-manager-xxxxxx                               1/1     Running   1 (30h ago)   31h
    kube-system        kube-proxy-nng5g                                             1/1     Running   1 (30h ago)   31h
    kube-system        kube-scheduler-xxxxxx                                        1/1     Running   1 (30h ago)   31h
    kube-system        onos-operator-app-6864f6f77c-wv57p                           1/1     Running   0             17m
    kube-system        onos-operator-config-7569c46b76-54ghh                        1/1     Running   0             17m
    kube-system        onos-operator-topo-7c68bc4d7-t97h6                           1/1     Running   0             17m
    smartedge-apps     cm-xapp-58557c8f56-ffxph                                     2/2     Running   0             15m
    smartedge-apps     onos-cli-764d9697fb-vnxhp                                    1/1     Running   0             17m
    smartedge-apps     onos-consensus-store-0                                       1/1     Running   0             17m
    smartedge-apps     onos-e2t-df496c8cd-qn629                                     3/3     Running   0             17m
    smartedge-apps     onos-topo-79f7c5c54d-2grvz                                   3/3     Running   0             17m
    smartedge-apps     onos-uenib-6f7466c87f-xhc9q                                  3/3     Running   0             17m
    smartedge-apps     ran-simulator-84f849f6d6-4gf6z                               1/1     Running   0             16m
    smartedge-system   nfd-release-node-feature-discovery-master-65db7b5549-jb28v   1/1     Running   0             30h
    smartedge-system   nfd-release-node-feature-discovery-worker-7mhqb              1/1     Running   0             30h
    telemetry          cadvisor-b2npn                                               2/2     Running   0             30h
    telemetry          collectd-k96wk                                               3/3     Running   0             30h
    telemetry          grafana-68bf7b4cd9-nmzhs                                     3/3     Running   0             30h
    telemetry          prometheus-node-exporter-4k5gx                               1/1     Running   0             30h
    telemetry          prometheus-server-55b69684c4-rzqg4                           3/3     Running   0             30h
    telemetry          statsd-exporter-99f9c6d67-zpfsq                              2/2     Running   0             30h
    ```
2. Verify the RAN simulator pods are 'Running' with UE and Cell details.
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-vnxhp -- onos ransim get cells
    NCGI                 #UEs Max UEs    TxDB       Lat       Lng Azimuth     Arc   A3Offset     TTT  A3Hyst PCellOffset FreqOffset      PCI    Color Idle Conn Neighbors(NCellOffset)
    13842601454c007         0   99999   40.00    12.942    77.698     120     120          0       0       0          0          0      107    green    7,   15, 13842601454c002(0),13842601454c004(0),13842601454c005(0)
    13842601454c002         0   99999   40.00    12.940    77.697       0     120          0       0       0          0          0      102    green    8,    4, 13842601454c003(0),13842601454c004(0),13842601454c007(0)
    13842601454c006         0   99999   40.00    12.942    77.696     120     120          0       0       0          0          0      106    green   35,   27, 13842601454c001(0),13842601454c004(0),13842601454c005(0)
    13842601454c003         0   99999   40.00    12.940    77.697     120     120          0       0       0          0          0      103    green    5,    6, 13842601454c001(0),13842601454c002(0),13842601454c004(0)
    13842601454c004         0   99999   40.00    12.940    77.697     240     120          0       0       0          0          0      104    green    6,    1, 13842601454c001(0),13842601454c002(0),13842601454c003(0),13842601454c005(0),13842601454c006(0),13842601454c007(0)
    13842601454c005         0   99999   40.00    12.942    77.696       0     120          0       0       0          0          0      105    green    9,   12, 13842601454c004(0),13842601454c006(0),13842601454c007(0)
    13842601454c001         0   99999   40.00    12.940    77.695       0     120          0       0       0          0          0      101    green    1,    4, 13842601454c003(0),13842601454c004(0),13842601454c006(0)
    54c005(0)
    smartedge-open@ubuntu-4b70b7ba43:~$
    ```

    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-vnxhp -- onos ransim get ueCount
    140
    ```

## ITP/RI/ICMAH/04: Verify uninstall and install of Intelligent Connection Management for Automated Handover RI
  
### Test Summary
  
Uninstall Intelligent Connection Management for Automated Handover RI and install tha same RI with appropriate product key.
Installation should succeed and RAN simulator should show UE, Cells details.

### Prerequisites
  
Start RI Installation (./edgesoftware install) [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)

### Test Steps
  
1. Verify the installation of ICMAH RI with commands below -

    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ ./edgesoftware list
    +--------------------------+----------------------------------------------------------+---------+
    |            ID            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    

    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl get pods -n smartedge-apps
    NAME                             READY   STATUS    RESTARTS   AGE
    cm-xapp-58557c8f56-ffxph         2/2     Running   0          23m
    onos-cli-764d9697fb-vnxhp        1/1     Running   0          24m
    onos-consensus-store-0           1/1     Running   0          24m
    onos-e2t-df496c8cd-qn629         3/3     Running   0          24m
    onos-topo-79f7c5c54d-2grvz       3/3     Running   0          24m
    onos-uenib-6f7466c87f-xhc9q      3/3     Running   0          24m
    ran-simulator-84f849f6d6-4gf6z   1/1     Running   0          23m
    ```

2. Uninstall the Intelligent Connection Management for Automated Handover RI instance.

    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ ./edgesoftware uninstall 61d80982d534850021b1422d
    Components to be uninstalled are :['Intelligent_Connection_Management_for_Automated_Handover']
    Uninstalling Intelligent_Connection_Management_for_Automated_Handover
    Uninstalling CM Xapp This might take upto 5 minutes.
    Cleaning up CM Xapp                                [............                                      ]  25%
    Successfully removed cm xapp from machine
    Cleaning up CM Xapp                                [.........................                         ]  50%  00:00:11
    Successfully removed sdran from machine
    Cleaning up CM Xapp                                [.....................................             ]  75%  00:00:07
    Successfully removed network policy from machine
    Cleaning up CM Xapp                                [..................................................] 100%
    Successfully uninstalled Intelligent_Connection_Management_for_Automated_Handover took 30.91 seconds
    Uninstall Finished
    +--------------------------+----------------------------------------------------------+---------+
    |            Id            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    ```

3. Verify the ICMAH RI is uninstalled successfully

    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware list
    +----+--------+--------+
    | ID | Module | Status |
    +----+--------+--------+
    +----+--------+--------+
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl get pods -n smartedge-apps
    No resources found in smartedge-apps namespace.
    ```

2. Reinstall the Intelligent Connection Management for Automated Handover RI with valid product key.<br>Installation should succeed and RAN simulator pods should showcase UE, Cell details.
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ ./edgesoftware install
    Please enter the Product Key. The Product Key is contained in the email you received from Intel confirming your download:  61e70db7-fcf0-424e-be62-1ec5d798f2da
    Starting the setup...
    ESB CLI version: 2021.4
    Target OS: Ubuntu 20.04
    Python version: 3.8.10
    Checking Internet connection
    Connected to the Internet
    Validating product key
    Successfully validated Product Key
    Checking for prerequisites
    W: Target CNF (multiverse/cnf/Commands-all) is configured multiple times in /etc/apt/sources.list:48 and /etc/apt/sources.list.d/security_ubuntu_
    com_ubuntu.list:3
    All dependencies met
    -------------------SYSTEM INFO--------------------
    Package Name: Intelligent Connection Management for Automated Handover 2.0.0
    Product Name: Dell Inc. PowerEdge R750
    CPU SKU: Intel(R) Xeon(R) Gold 6338N CPU @ 2.20GHz
    Memory Size: 504 GB
    Operating System: Ubuntu 20.04.2 LTS
    Kernel Version: 5.13.0-27-generic
    Accelerator: None
    CPU Utilization: 1.3%
    Available Disk Space: 159 GB
    WARNING: Installation may fail. The target device does not meet the minimum system requirement.
    Minimum memory requirement for this package: 64 GB.
    Minimum disk requirement for this package: 512 GB.
    Starting installation
    Downloading modules...
    Downloading component esb_common
    ZIP file for module 6022bd8ccc7449002afdbedd already exists. Validating it...
    Module validation passed for 6022bd8ccc7449002afdbedd
    Skipping download...
    Downloading component Intelligent_Connection_Management_for_Automated_Handover
    ZIP file for module 61d80982d534850021b1422d already exists. Validating it...
    Module validation passed for 61d80982d534850021b1422d
    Skipping download...
    Downloading modules completed...
    Installing shared module 'esb_common'
    Unzipping the shared module 'esb_common'...
    running install
    running bdist_egg
    running egg_info
    writing esb_common.egg-info/PKG-INFO
    writing dependency_links to esb_common.egg-info/dependency_links.txt
    writing top-level names to esb_common.egg-info/top_level.txt
    reading manifest file 'esb_common.egg-info/SOURCES.txt'
    writing manifest file 'esb_common.egg-info/SOURCES.txt'
    installing library code to build/bdist.linux-x86_64/egg
    running install_lib
    warning: install_lib: 'build/lib' does not exist -- no Python modules to install

    creating build/bdist.linux-x86_64/egg
    creating build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    zip_safe flag not set; analyzing archive contents...
    creating 'dist/esb_common-0.1-py3.8.egg' and adding 'build/bdist.linux-x86_64/egg' to it
    removing 'build/bdist.linux-x86_64/egg' (and everything under it)
    Processing esb_common-0.1-py3.8.egg
    Removing /usr/local/lib/python3.8/dist-packages/esb_common-0.1-py3.8.egg
    Copying esb_common-0.1-py3.8.egg to /usr/local/lib/python3.8/dist-packages
    esb-common 0.1 is already the active version in easy-install.pth

    Installed /usr/local/lib/python3.8/dist-packages/esb_common-0.1-py3.8.egg
    Processing dependencies for esb-common==0.1
    Finished processing dependencies for esb-common==0.1
    Successfully installed shared module 'esb_common'.
    Modules to be installed by package are ['Intelligent_Connection_Management_for_Automated_Handover']
    Installing Intelligent_Connection_Management_for_Automated_Handover
    Verifying SE Node (xx.xx.xxx.xx)                   [..................................................] 100%


    Before installing freshly, deleting partially installed pods if any ...
    Uninstalling CM Xapp This might take upto 5 minutes.
    Cleaning up CM Xapp quietly                        [..................................................] 100%
    Installing CM Xapp dependencies on SE Node . . .   [..........................................        ]  84%  00:00:20
    Successfully installed: SDRAN

    CM Xapp installation started. This might take upto 5-10 mins for getting docker images from registry
    Installing CM Xapp                                 [..................................................] 100%
    Successfully installed: CM Xapp

    Verifying CM Xapp installation in (xx.xx.xxx.xx)   [..................................................] 100%
    Successfully installed Intelligent_Connection_Management_for_Automated_Handover took 3 minutes 33.39 seconds
    Installation of package complete
    ***Recommended to reboot system after installation***
    +--------------------------+----------------------------------------------------------+---------+
    |            Id            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    ```

3. Verify the installation with commands below

    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ ./edgesoftware list
    +--------------------------+----------------------------------------------------------+---------+
    |            ID            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+

    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl get pods -n smartedge-apps
    NAME                             READY   STATUS    RESTARTS   AGE
    cm-xapp-58557c8f56-k4vpc         2/2     Running   0          5m46s
    onos-cli-764d9697fb-qlh5j        1/1     Running   0          7m7s
    onos-consensus-store-0           1/1     Running   0          7m6s
    onos-e2t-df496c8cd-j6rzj         3/3     Running   0          7m7s
    onos-topo-79f7c5c54d-ns74r       3/3     Running   0          7m7s
    onos-uenib-6f7466c87f-97cjj      3/3     Running   0          7m7s
    ran-simulator-84f849f6d6-qbpnc   1/1     Running   0          6m2s

    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-qlh5j -- onos ransim get ueCount
    140

    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-qlh5j -- onos ransim get cells
    NCGI                 #UEs Max UEs    TxDB       Lat       Lng Azimuth     Arc   A3Offset     TTT  A3Hyst PCellOffset FreqOffset      PCI    Color Idle Conn Neighbors(NCellOffset)
    13842601454c006         0   99999   40.00    12.942    77.696     120     120          0       0       0          0          0      106    green   17,   20, 13842601454c001(0),13842601454c004(0),13842601454c005(0)
    13842601454c004         0   99999   40.00    12.940    77.697     240     120          0       0       0          0          0      104    green    4,    4, 13842601454c001(0),13842601454c002(0),13842601454c003(0),13842601454c005(0),13842601454c006(0),13842601454c007(0)
    13842601454c005         0   99999   40.00    12.942    77.696       0     120          0       0       0          0          0      105    green    8,   11, 13842601454c004(0),13842601454c006(0),13842601454c007(0)
    13842601454c007         0   99999   40.00    12.942    77.698     120     120          0       0       0          0          0      107    green    1,   20, 13842601454c002(0),13842601454c004(0),13842601454c005(0)
    13842601454c001         0   99999   40.00    12.940    77.695       0     120          0       0       0          0          0      101    green    8,    6, 13842601454c003(0),13842601454c004(0),13842601454c006(0)
    13842601454c002         0   99999   40.00    12.940    77.697       0     120          0       0       0          0          0      102    green    8,   26, 13842601454c003(0),13842601454c004(0),13842601454c007(0)
    13842601454c003         0   99999   40.00    12.940    77.697     120     120          0       0       0          0          0      103    green    6,    1, 13842601454c001(0),13842601454c002(0),13842601454c004(0)
    ```

## ITP/RI/ICMAH/05: Delete Intelligent Connection Management application pod and verify its recovery and functionality

### Test Summary
  
Delete the Intelligent Connection Management for Automated Handover application pods and verify its recovery and functionality by accessing the individuals pods/logs.
  
### Prerequisites
  
Bringup the RI as per [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)
  
### Test Steps
  
1. Verify the ICMAH RI application pods with command below
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl get pods -n smartedge-apps
    NAME                             READY   STATUS    RESTARTS   AGE
    cm-xapp-58557c8f56-k4vpc         2/2     Running   0          13m
    onos-cli-764d9697fb-qlh5j        1/1     Running   0          14m
    onos-consensus-store-0           1/1     Running   0          14m
    onos-e2t-df496c8cd-j6rzj         3/3     Running   0          14m
    onos-topo-79f7c5c54d-ns74r       3/3     Running   0          14m
    onos-uenib-6f7466c87f-97cjj      3/3     Running   0          14m
    ran-simulator-84f849f6d6-qbpnc   1/1     Running   0          13m
    ```  
2. Delete the CM xApps and RAN simulator pod from 'smartedge-apps' namespace 
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl delete pod -n smartedge-apps cm-xapp-58557c8f56-k4vpc
    pod "cm-xapp-58557c8f56-k4vpc" deleted
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl delete pod -n smartedge-apps ran-simulator-84f849f6d6-qbpnc
    pod "ran-simulator-84f849f6d6-qbpnc" deleted

    ```
3. Verify the deleted pod recovers with refreshed UE connection status

    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl get pods -n smartedge-apps
    NAME                             READY   STATUS    RESTARTS   AGE
    cm-xapp-58557c8f56-sk5mg         2/2     Running   0          80s
    onos-cli-764d9697fb-qlh5j        1/1     Running   0          16m
    onos-consensus-store-0           1/1     Running   0          16m
    onos-e2t-df496c8cd-j6rzj         3/3     Running   0          16m
    onos-topo-79f7c5c54d-ns74r       3/3     Running   0          16m
    onos-uenib-6f7466c87f-97cjj      3/3     Running   0          16m
    ran-simulator-84f849f6d6-vwrdx   1/1     Running   0          57s
    ```
    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-qlh5j -- onos ransim get ueCount
    140
    ```
    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-qlh5j -- onos ransim get ues | grep IDLE | wc -l
    63
    ```

## ITP/RI/ICMAH/06: Verify Product key integrity during ICMAH installation
  
### Test Summary

Intelligent Connection Management for Automated Handover RI Installation should fail for an input of invalid Product key

### Prerequisites

- SEO DEK deployed on target host
- Intelligent Connection Management for Automated Handover RI downloaded
 
### Test Steps

1. During the installation, user shall be prompted for the Product Key. Enter invalid Product key and verify the installation fails with error as below.

    ```shell
    smartedge-open@ubuntu-c1c5dc0185:~/Intelligent_Connection_Management$ ./edgesoftware install
    Please enter the Product Key. The Product Key is contained in the email you received from Intel confirming your download:  12345678-1234-4321-098
    765432112
    Starting the setup...
    ESB CLI version: 2021.4
    Target OS: Ubuntu 20.04
    Python version: 3.8.10
    Checking Internet connection
    Connected to the Internet
    Validating product key
    [WARNING] Invalid Product Key. Continuing installation with local files
    Checking for prerequisites
    ```
    ```shell
    All dependencies met
    -------------------SYSTEM INFO--------------------
    Package Name: Intelligent Connection Management for Automated Handover 2.0.0
    Product Name: Dell Inc. PowerEdge R750
    CPU SKU: Intel(R) Xeon(R) Gold 6338N CPU @ 2.20GHz
    Memory Size: 504 GB
    Operating System: Ubuntu 20.04.2 LTS
    Kernel Version: 5.13.0-27-generic
    Accelerator: None
    CPU Utilization: 1.5%
    Available Disk Space: 433 GB
    Starting installation
    Downloading modules...
    Downloading component esb_common
    Failed to download the module esb_common. 401 Unauthorized
    Downloading component Intelligent_Connection_Management_for_Automated_Handover
    Failed to download the module Intelligent_Connection_Management_for_Automated_Handover. 401 Unauthorized
    Downloading modules completed...
    Installing shared module 'esb_common'
    Failed to find shared module 'esb_common'. Exiting installation.
    ```

## ITP/RI/ICMAH/07: Verify reinstallation of Intelligent Connection Management for Automated Handover RI
  
### Test Summary
  
Re-install Intelligent Connection Management for Automated Handover RI in an already installed node<br>Install -> Install

### Prerequisites
  
Start RI Installation (./edgesoftware install) [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)

### Test Steps
  
1. Re-install Intelligent Connection Management for Automated Handover RI again in the same node, after the previous installation is success.

    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ ./edgesoftware install
    Please enter the Product Key. The Product Key is contained in the email you received from Intel confirming your download:  fdjhshrufrjkhdk
    Starting the setup...
    ESB CLI version: 2021.4
    Target OS: Ubuntu 20.04
    Python version: 3.8.10
    Checking Internet connection
    Connected to the Internet
    Validating product key
    [WARNING] Invalid Product Key. Continuing installation with local files
    Checking for prerequisites
    ...
    ...    
    All dependencies met
    -------------------SYSTEM INFO--------------------
    Package Name: Intelligent Connection Management for Automated Handover 2.0.0
    Product Name: Dell Inc. PowerEdge R750
    CPU SKU: Intel(R) Xeon(R) Gold 6338N CPU @ 2.20GHz
    Memory Size: 504 GB
    Operating System: Ubuntu 20.04.2 LTS
    Kernel Version: 5.13.0-27-generic
    Accelerator: None
    CPU Utilization: 1.3%
    Available Disk Space: 159 GB
    WARNING: Installation may fail. The target device does not meet the minimum system requirement.
    Minimum memory requirement for this package: 64 GB.
    Minimum disk requirement for this package: 512 GB.
    Starting installation
    Downloading modules...
    Downloading component esb_common
    ZIP file for module 6022bd8ccc7449002afdbedd already exists. Validating it...
    Module validation passed for 6022bd8ccc7449002afdbedd
    Skipping download...
    Downloading component Intelligent_Connection_Management_for_Automated_Handover
    ZIP file for module 61d80982d534850021b1422d already exists. Validating it...
    Module validation passed for 61d80982d534850021b1422d
    Skipping download...
    Downloading modules completed...
    Installing shared module 'esb_common'
    Unzipping the shared module 'esb_common'...
    running install
    ```

2. During re-installation the script shall prompt user to confirm with option 'YES' or 'NO'.<br>Enter 'YES' to proceed with re-installation.

    ```shell
    running bdist_egg
    running egg_info
    writing esb_common.egg-info/PKG-INFO
    writing dependency_links to esb_common.egg-info/dependency_links.txt
    writing top-level names to esb_common.egg-info/top_level.txt
    reading manifest file 'esb_common.egg-info/SOURCES.txt'
    writing manifest file 'esb_common.egg-info/SOURCES.txt'
    installing library code to build/bdist.linux-x86_64/egg
    running install_lib
    warning: install_lib: 'build/lib' does not exist -- no Python modules to install

    creating build/bdist.linux-x86_64/egg
    creating build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    zip_safe flag not set; analyzing archive contents...
    creating 'dist/esb_common-0.1-py3.8.egg' and adding 'build/bdist.linux-x86_64/egg' to it
    removing 'build/bdist.linux-x86_64/egg' (and everything under it)
    Processing esb_common-0.1-py3.8.egg
    Removing /usr/local/lib/python3.8/dist-packages/esb_common-0.1-py3.8.egg
    Copying esb_common-0.1-py3.8.egg to /usr/local/lib/python3.8/dist-packages
    esb-common 0.1 is already the active version in easy-install.pth

    Installed /usr/local/lib/python3.8/dist-packages/esb_common-0.1-py3.8.egg
    Processing dependencies for esb-common==0.1
    Finished processing dependencies for esb-common==0.1
    Successfully installed shared module 'esb_common'.
    Modules to be installed by package are ['Intelligent_Connection_Management_for_Automated_Handover']
    Installing Intelligent_Connection_Management_for_Automated_Handover
    Verifying SE Node (xx.xx.xxx.xx)                   [..................................................] 100%


    Before installing freshly, deleting partially installed pods if any ...
    Uninstalling CM Xapp This might take upto 5 minutes.
    Cleaning up CM Xapp quietly                        [..................................................] 100%
    Installing CM Xapp dependencies on SE Node . . .   [..........................................        ]  84%  00:00:17
    Successfully installed: SDRAN

    CM Xapp installation started. This might take upto 5-10 mins for getting docker images from registry
    Installing CM Xapp                                 [..................................................] 100%
    Successfully installed: CM Xapp

    Verifying CM Xapp installation in (xx.xx.xxx.xx)   [..................................................] 100%
    Successfully installed Intelligent_Connection_Management_for_Automated_Handover took 3 minutes 2.59 seconds
    Installation of package complete
    ***Recommended to reboot system after installation***
    +--------------------------+----------------------------------------------------------+---------+
    |            Id            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    ```

3. Verify the pods status prompt either 'Running' or 'Completed' after re-installation of RI 
  
    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl get pods -A
    NAMESPACE          NAME                                                         READY   STATUS    RESTARTS      AGE
    cert-manager       cert-manager-cainjector-7db56c5fd6-tl549                     1/1     Running   0             31h
    cert-manager       cert-manager-f5c794b65-jqgn4                                 1/1     Running   0             31h
    cert-manager       cert-manager-webhook-6c86d79f7c-xlphm                        1/1     Running   0             31h
    harbor             harbor-app-chartmuseum-7dc685c9cd-d25c2                      1/1     Running   0             31h
    harbor             harbor-app-core-68c9c9f58c-hmjmj                             1/1     Running   4             31h
    harbor             harbor-app-database-0                                        1/1     Running   0             31h
    harbor             harbor-app-jobservice-78745b778f-gm6wp                       1/1     Running   1 (31h ago)   31h
    harbor             harbor-app-nginx-74cfb9b674-rxkv8                            1/1     Running   0             31h
    harbor             harbor-app-notary-server-855c799fbb-p4rz8                    1/1     Running   4 (31h ago)   31h
    harbor             harbor-app-notary-signer-5cfc7577d-5xphv                     1/1     Running   5 (31h ago)   31h
    harbor             harbor-app-portal-6d6bcdc8bf-sjz4q                           1/1     Running   0             31h
    harbor             harbor-app-redis-0                                           1/1     Running   0             31h
    harbor             harbor-app-registry-599949cb8b-hs2f9                         2/2     Running   0             31h
    harbor             harbor-app-trivy-0                                           1/1     Running   0             31h
    kube-system        atomix-controller-6767f468cc-2gnhp                           1/1     Running   0             11m
    kube-system        atomix-raft-storage-controller-85db5888f6-rp7dc              1/1     Running   0             10m
    kube-system        calico-kube-controllers-654b987fd9-m2k7p                     1/1     Running   1 (31h ago)   32h
    kube-system        calico-node-wvpk9                                            1/1     Running   1 (31h ago)   32h
    kube-system        coredns-78fcd69978-rmqtr                                     1/1     Running   1 (31h ago)   32h
    kube-system        coredns-78fcd69978-zrhj4                                     1/1     Running   1 (31h ago)   32h
    kube-system        etcd-xxxxxx                                                  1/1     Running   2 (31h ago)   32h
    kube-system        kube-apiserver-xxxxxx                                        1/1     Running   1 (31h ago)   32h
    kube-system        kube-controller-manager-xxxxxx                               1/1     Running   1 (31h ago)   32h
    kube-system        kube-proxy-nng5g                                             1/1     Running   1 (31h ago)   32h
    kube-system        kube-scheduler-xxxxxx                                        1/1     Running   1 (31h ago)   32h
    kube-system        onos-operator-app-6864f6f77c-nwg7h                           1/1     Running   0             10m
    kube-system        onos-operator-config-7569c46b76-zqzff                        1/1     Running   0             10m
    kube-system        onos-operator-topo-7c68bc4d7-fgs47                           1/1     Running   0             10m
    smartedge-apps     cm-xapp-58557c8f56-gk9w7                                     2/2     Running   0             9m25s
    smartedge-apps     onos-cli-764d9697fb-k5ftt                                    1/1     Running   0             10m
    smartedge-apps     onos-consensus-store-0                                       1/1     Running   0             10m
    smartedge-apps     onos-e2t-df496c8cd-8w64r                                     3/3     Running   0             10m
    smartedge-apps     onos-topo-79f7c5c54d-jdbdq                                   3/3     Running   0             10m
    smartedge-apps     onos-uenib-6f7466c87f-jff7q                                  3/3     Running   0             10m
    smartedge-apps     ran-simulator-84f849f6d6-nkhjf                               1/1     Running   0             9m40s
    smartedge-system   nfd-release-node-feature-discovery-master-65db7b5549-jb28v   1/1     Running   0             31h
    smartedge-system   nfd-release-node-feature-discovery-worker-7mhqb              1/1     Running   0             31h
    telemetry          cadvisor-b2npn                                               2/2     Running   0             31h
    telemetry          collectd-k96wk                                               3/3     Running   0             31h
    telemetry          grafana-68bf7b4cd9-nmzhs                                     3/3     Running   0             31h
    telemetry          prometheus-node-exporter-4k5gx                               1/1     Running   0             31h
    telemetry          prometheus-server-55b69684c4-rzqg4                           3/3     Running   0             31h
    telemetry          statsd-exporter-99f9c6d67-zpfsq                              2/2     Running   0             31h
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-sdx4z -- onos ransim get ues | grep CONNECTED | wc -l
    56
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl exec -it -n smartedge-apps onos-cli-764d9697fb-k5ftt -- onos ransim get ues | grep CONNECTED | wc -l
    72
    ```  
  
## ITP/RI/ICMAH/08: Verify ICMAH RI installation with product key of another RI instance
  
### Test Summary
  
Install Intelligent Connection Management for Automated Handover RI with product key of another RI instance.<br>RI installation should fail.

### Prerequisites
  
Start RI Installation (./edgesoftware install) [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)

### Test Steps

1. Verify installation of ICMAH RI with product key of another RI.<br> Installation should fail displaying invalid product key.   
  
    ```shell
    smartedge-open@ubuntu-c1c5dc0185:~/Intelligent_Connection_Management$ ./edgesoftware install
    Please enter the Product Key. The Product Key is contained in the email you received from Intel confirming your download:  8745563b-e7ae-4e43-8a3
    6-0559c4258818
    Starting the setup...
    ESB CLI version: 2021.4
    Target OS: Ubuntu 20.04
    Python version: 3.8.10
    Checking Internet connection
    Connected to the Internet
    Validating product key
    [WARNING] Invalid Product Key. Continuing installation with local files
    Checking for prerequisites
    ```
    ```shell
    All dependencies met
    -------------------SYSTEM INFO--------------------
    Package Name: Intelligent Connection Management for Automated Handover 2.0.0
    Product Name: Dell Inc. PowerEdge R750
    CPU SKU: Intel(R) Xeon(R) Gold 6338N CPU @ 2.20GHz
    Memory Size: 504 GB
    Operating System: Ubuntu 20.04.2 LTS
    Kernel Version: 5.13.0-27-generic
    Accelerator: None
    CPU Utilization: 1.5%
    Available Disk Space: 433 GB
    Starting installation
    Downloading modules...
    Downloading component esb_common
    Failed to download the module esb_common. 401 Unauthorized
    Downloading component Intelligent_Connection_Management_for_Automated_Handover
    Failed to download the module Intelligent_Connection_Management_for_Automated_Handover. 401 Unauthorized
    Downloading modules completed...
    Installing shared module 'esb_common'
    Failed to find shared module 'esb_common'. Exiting installation.
    ```

## ITP/RI/ICMAH/09: Verify uninstall and install of ICMAH RI with an invalid product key
  
### Test Summary
  
Uninstall Intelligent Connection Management for Automated Handover RI and install tha same RI with invalid product key.
Installation process should abort for invalid product key credentials.

### Prerequisites
  
Start RI Installation (./edgesoftware install) [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)

### Test Steps
  
1. Uninstall the Intelligent Connection Management for Automated Handover RI instance.

    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ ./edgesoftware uninstall 61d80982d534850021b1422d
    Components to be uninstalled are :['Intelligent_Connection_Management_for_Automated_Handover']
    Uninstalling Intelligent_Connection_Management_for_Automated_Handover
    Uninstalling CM Xapp This might take upto 5 minutes.
    Cleaning up CM Xapp                                [............                                      ]  25%
    Successfully removed cm xapp from machine
    Cleaning up CM Xapp                                [.........................                         ]  50%  00:00:11
    Successfully removed sdran from machine
    Cleaning up CM Xapp                                [.....................................             ]  75%  00:00:07
    Successfully removed network policy from machine
    Cleaning up CM Xapp                                [..................................................] 100%
    Successfully uninstalled Intelligent_Connection_Management_for_Automated_Handover took 30.81 seconds
    Uninstall Finished
    +--------------------------+----------------------------------------------------------+---------+
    |            Id            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    ```
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware list
    +----+--------+--------+
    | ID | Module | Status |
    +----+--------+--------+
    +----+--------+--------+
    ```

2. Reinstall the Intelligent Connection Management for Automated Handover RI with invalid product key.<br>Installation should fail displaying invalid product key.
  
    ```shell
    TBD: Pending JIRA closure
    ```

## ITP/RI/ICMAH/10: Verify uninstall of ICMAH RI followed by an abort signal for previous cleanup instance
  
### Test Summary
  
Verify the uninstall of ICMAH RI followed by an abort signal for previous interrupted cleanup instance.<br>Uninstall should succeed irrespective of previous cleanup state.

### Prerequisites
  
Start RI Installation (./edgesoftware install) [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)

### Test Steps

1. Verify the ICMAH RI installation with list command

    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ ./edgesoftware list
    +--------------------------+----------------------------------------------------------+---------+
    |            ID            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+

    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$
    ```

2. Start the uninstall process of ICMAH RI instance with module id, abort the process with Ctrl+C before it completes.

    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware uninstall 619b8bceff6f230021e4409e
    Components to be uninstalled are :['Intelligent_Connection_Management_for_Automated_Handover']
    Uninstalling Intelligent_Connection_Management_for_Automated_Handover
    Uninstalling CM Xapp This might take upto 5 minutes.
    Cleaning up CM Xapp                                [............                                      ]  25%^CUninstallation aborted by user. Exiting uninstallation
    ```

3. Verify the uninstall is aborted and ICMAH RI instance exists.

    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl get pods -n smartedge-apps
    NAME                             READY   STATUS    RESTARTS   AGE
    onos-cli-764d9697fb-fck9r        1/1     Running   0          5m10s
    onos-consensus-store-0           1/1     Running   0          5m10s
    onos-e2t-df496c8cd-6hwwn         3/3     Running   0          5m10s
    onos-topo-79f7c5c54d-wcpb9       3/3     Running   0          5m10s
    onos-uenib-6f7466c87f-9jtkj      3/3     Running   0          5m10s
    ran-simulator-84f849f6d6-f95p4   1/1     Running   0          4m5s

    smartedge-open@ubuntu-4b70b7ba43101101:~/Intelligent_Connection_Management$ ./edgesoftware list
    +--------------------------+----------------------------------------------------------+---------+
    |            ID            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    ```

4. Re-trigger the uninstall process again with './edgesoftware uninstall <modulle id>' command.<br>Ensure the uninstall is Success by checking the pods in 'smartedge-apps' namespace.

    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware uninstall 61d80982d534850021b1422d
    Components to be uninstalled are :['Intelligent_Connection_Management_for_Automated_Handover']
    Uninstalling Intelligent_Connection_Management_for_Automated_Handover
    Uninstalling CM Xapp This might take upto 5 minutes.
    Cleaning up CM Xapp                                [.........................                         ]  50%  00:00:10
    Successfully removed sdran from machine
    Cleaning up CM Xapp                                [.....................................             ]  75%  00:00:07
    Successfully removed network policy from machine
    Cleaning up CM Xapp                                [..................................................] 100%
    Successfully uninstalled Intelligent_Connection_Management_for_Automated_Handover took 30.93 seconds
    Uninstall Finished
    +--------------------------+----------------------------------------------------------+---------+
    |            Id            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware list
    +----+--------+--------+
    | ID | Module | Status |
    +----+--------+--------+
    +----+--------+--------+
    ```

## ITP/RI/ICMAH/11: Verify ICMAH RI installation with an invalid credentials for ONF portal after successful install and uninstall cycle
  
### Test Summary
  
Verify the Intelligent Connection Management for Automated Handover RI installation with invalid credentials for ONF portal after successful install and uninstall of RI cycle once. Script should prompt error for invalid input.

### Prerequisites
  
Start RI Installation (./edgesoftware install) [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)

### Test Steps

1. Uninstall the Intelligent Connection Management for Automated Handover RI instance.

    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware uninstall 619b8bceff6f230021e4409e
    Components to be uninstalled are :['Intelligent_Connection_Management_for_Automated_Handover']
    Uninstalling Intelligent_Connection_Management_for_Automated_Handover
    Uninstalling CM Xapp This might take upto 5 minutes.
    Cleaning up CM Xapp                                [............                                      ]  25%
    Successfully removed cm xapp from machine
    Cleaning up CM Xapp                                [.........................                         ]  50%  00:00:11
    Successfully removed sdran from machine
    Cleaning up CM Xapp                                [.....................................             ]  75%  00:00:07
    Successfully removed network policy from machine
    Cleaning up CM Xapp                                [..................................................] 100%
    Successfully uninstalled Intelligent_Connection_Management_for_Automated_Handover took 31.38 seconds
    Uninstall Finished
    +--------------------------+----------------------------------------------------------+---------+
    |            Id            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 619b8bceff6f230021e4409e | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    ```

2. Start the installation of Intelligent Connection Management for Automated Handover RI again with valid product key.<br>Enter invalid password for ONF portal and verify the installation fails with error shown below

    ```shell
      Please contact ONF(https://opennetworking.org/contact/) for username and password credentials that allow access to the sdran helm chart repo.
      Enter sdran username: intel
      Enter sdran password: <Invalid Password>
      Installing CM Xapp dependencies on SE Node . . .   [...........                                       ]  23%  00:01:04
      Unable to add sdran helm chart

      ERROR:
      Unable to add sdran helm chart helm repo add sdran --username intel --password wrong https://sdrancharts.onosproject.org
      Failed to install Intelligent_Connection_Management_for_Automated_Handover took 1 minutes 28.07 seconds
      Installation of package complete
      +--------------------------+----------------------------------------------------------+--------+
      |            Id            |                          Module                          | Status |
      +--------------------------+----------------------------------------------------------+--------+
      | 619b8bceff6f230021e4409e | Intelligent Connection Management for Automated Handover | FAILED |
      +--------------------------+----------------------------------------------------------+--------+
      ```
Note: SDRAN credentials are not needed for the latest package

## ITP/RI/ICMAH/12: Verify E2E Latency measurement of CMxApp meets the ORAN KPI using OpenVINO 

### Test Summary
Verify E2E Latency measurement of Intelligent Connection Management for Automated Handover RI meets the ORAN KPI using OpenVINO method. Handover request processing time should be in range less than 0.01 second.
    
### Prerequisites
  
Start RI Installation (./edgesoftware install) [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)

### Test Steps

1. Verify the CMxApp pod status with the command below

    ```shell
    smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl -n smartedge-apps get pod
    NAME                             READY   STATUS    RESTARTS   AGE
    cm-xapp-58557c8f56-fqpbw         2/2     Running   0          4h
    onos-cli-764d9697fb-zmhfv        1/1     Running   0          4h
    onos-consensus-store-0           1/1     Running   0          4h
    onos-e2t-df496c8cd-dqpl7         3/3     Running   0          4h
    onos-topo-79f7c5c54d-fdg8k       3/3     Running   0          4h
    onos-uenib-6f7466c87f-w8lw8      3/3     Running   0          4h
    ran-simulator-84f849f6d6-h5c4l   1/1     Running   0          4h
    ```
2. Verify  Handover request processing time with CMxApp and RAN simulator pod from 'smartedge-apps' namespace 

   Note: Minimum active UE number should be 50 and maximum number of UE is 140. The total running time will be more than 4 hours and 99% the total Handover request processing time should be less than 0.01 second. 
         If total Handover request processing time is more than 0.01 second, uninstall and reinstall the package and repeat the process.

    ```shell
    smartedge-open@@ubuntu-4b70b7ba43:~$ kubectl logs cm-xapp-58557c8f56-fqpbw -n smartedge-apps -c cm-xapp
    03/10/2022 04:34:19 PM Calling control req no 1 for UE : 9119653 Serving cell: 13842601454c002 target_cell 13842601454c006
    03/10/2022 04:34:19 PM Number of Active UEs: 5
    03/10/2022 04:34:19 PM Number of total UEs: 76
    03/10/2022 04:34:19 PM PRE HO processing time: 0.0018 seconds
    03/10/2022 04:34:19 PM OpenVINO Inference HO processing time: 0.0050 seconds
    03/10/2022 04:34:19 PM Number of HOs processed: 1
    03/10/2022 04:34:19 PM Post HO processing time: 0.0024 seconds
    03/10/2022 04:34:19 PM Total HO processing time: 0.0092 seconds
    03/10/2022 04:34:19 PM Queue len: 3
    03/10/2022 04:34:19 PM Calling control req no 2 for UE : 5425034 Serving cell: 13842601454c002 target_cell 13842601454c007
    03/10/2022 04:34:19 PM Number of Active UEs: 5
    03/10/2022 04:34:19 PM Number of total UEs: 76
    03/10/2022 04:34:19 PM PRE HO processing time: 0.0011 seconds
    03/10/2022 04:34:19 PM OpenVINO Inference HO processing time: 0.0019 seconds
    03/10/2022 04:34:19 PM Number of HOs processed: 1
    03/10/2022 04:34:19 PM Post HO processing time: 0.0017 seconds
    03/10/2022 04:34:19 PM Total HO processing time: 0.0046 seconds
    03/10/2022 04:34:19 PM Queue len: 2
    03/10/2022 04:34:19 PM Calling control req no 3 for UE : 6451904 Serving cell: 13842601454c006 target_cell 13842601454c005
    03/10/2022 04:34:20 PM Number of Active UEs: 5
    03/10/2022 04:34:20 PM Number of total UEs: 76
    03/10/2022 04:34:20 PM PRE HO processing time: 0.0012 seconds
    03/10/2022 04:34:20 PM OpenVINO Inference HO processing time: 0.0012 seconds
    03/10/2022 04:34:20 PM Number of HOs processed: 1
    03/10/2022 04:34:20 PM Post HO processing time: 0.0016 seconds
    03/10/2022 04:34:20 PM Total HO processing time: 0.0040 seconds
    03/10/2022 04:34:20 PM Queue len: 1
    03/10/2022 04:34:20 PM Calling control req no 4 for UE : 1021166 Serving cell: 13842601454c007 target_cell 13842601454c006
    03/10/2022 04:34:20 PM Number of Active UEs: 5
    03/10/2022 04:34:20 PM Number of total UEs: 76
    03/10/2022 04:34:20 PM PRE HO processing time: 0.0028 seconds
    03/10/2022 04:34:20 PM OpenVINO Inference HO processing time: 0.0012 seconds
    03/10/2022 04:34:20 PM Number of HOs processed: 1
    03/10/2022 04:34:20 PM Post HO processing time: 0.0015 seconds
    03/10/2022 04:34:20 PM Total HO processing time: 0.0054 seconds
    03/10/2022 04:34:20 PM Queue len: 1
    03/10/2022 04:34:21 PM Queue len: 1
    03/10/2022 04:34:22 PM Queue len: 1
    03/10/2022 04:34:23 PM Queue len: 1
    03/10/2022 04:34:23 PM Total Indications: 10000 Periodic: 5512 Event-Based: 4418 RRC: 70
    03/10/2022 04:34:24 PM Queue len: 1
    03/10/2022 04:34:25 PM Queue len: 1
    03/10/2022 04:34:25 PM Calling control req no 5 for UE : 6150804 Serving cell: 13842601454c005 target_cell 13842601454c006
    03/10/2022 04:34:25 PM Number of Active UEs: 5
    03/10/2022 04:34:25 PM Number of total UEs: 76
    03/10/2022 04:34:25 PM PRE HO processing time: 0.0010 seconds
    03/10/2022 04:34:25 PM OpenVINO Inference HO processing time: 0.0017 seconds
    03/10/2022 04:34:25 PM Number of HOs processed: 1
    03/10/2022 04:34:25 PM Post HO processing time: 0.0021 seconds
    03/10/2022 04:34:25 PM Total HO processing time: 0.0047 seconds
    03/10/2022 04:34:30 PM Queue len: 1
    03/10/2022 04:34:30 PM Calling control req no 6 for UE : 6451904 Serving cell: 13842601454c005 target_cell 13842601454c002
    03/10/2022 04:34:30 PM Number of Active UEs: 5
    03/10/2022 04:34:30 PM Number of total UEs: 76
    03/10/2022 04:34:30 PM PRE HO processing time: 0.0009 seconds
    03/10/2022 04:34:30 PM OpenVINO Inference HO processing time: 0.0025 seconds
    03/10/2022 04:34:30 PM Number of HOs processed: 1
    03/10/2022 04:34:30 PM Post HO processing time: 0.0015 seconds
    03/10/2022 04:34:30 PM Total HO processing time: 0.0048 seconds
    03/10/2022 04:34:30 PM Queue len: 1
    03/10/2022 04:34:30 PM Calling control req no 7 for UE : 1021166 Serving cell: 13842601454c006 target_cell 13842601454c007
    03/10/2022 04:34:30 PM Number of Active UEs: 5
    03/10/2022 04:34:30 PM Number of total UEs: 77
    03/10/2022 04:34:30 PM PRE HO processing time: 0.0006 seconds
    03/10/2022 04:34:30 PM OpenVINO Inference HO processing time: 0.0011 seconds
    03/10/2022 04:34:30 PM Number of HOs processed: 1
    03/10/2022 04:34:30 PM Post HO processing time: 0.0013 seconds
    03/10/2022 04:34:30 PM Total HO processing time: 0.0031 seconds
    ```
    Note: Handover request processing time should be less than 0.01 second

3. After latency measurement process, execute the following command to get xapp log
      
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~$ kubectl -n smartedge-apps exec -it cm-xapp-58557c8f56-fqpbw  -- bash
    Defaulted container "cm-xapp" out of: cm-xapp, onos-proxy
    openvino@cm-xapp-cbb7b9499-gnk2q:~$ ls
    HOprocess.py  __pycache__     cDQNandGNN.py  databaseProcess.py  oranHandOverEnv.py       queueManagement.py  xApp_ONF.py
    OpenVINO      cActivation.py  csrc           onos_sdk_client.so  pygo_mediation_layer.py  weights.data        xapp.log
    ```
4. Verify the xapp log file name using below command and dump logs as log.txt
      
    ```shell
   smartedge-open@ubuntu-4b70b7ba43:/home/smartedge-open/dek/tmp$ kubectl cp smartedge-apps/cm-xapp-58557c8f56-fqpbw:/home/openvino/xapp.log ./log.txt
   Defaulted container "cm-xapp" out of: cm-xapp, onos-proxy
   smartedge-open@ubuntu-4b70b7ba43:/home/smartedge-open/dek/tmp$ ls
    log.txt
     ```
5. Download the Python package from the below repo
	
    ```shell	
    git clone https://github.com/intel-innersource/networking.wireless.oran-ric.xapp-icmah/blob/master/ORAN_sim_ONF/latest.py
    ```	
	
6. Execute the following command from Python path
		 
   ```shell
   smartedge-open@ubuntu-4b70b7ba43:/home/smartedge-open/dek/tmp1:$ python3 latest.py
   ```
Note: Minimum active UE number should be 50 and maximum number of UE is 140. The total running time will be more than 4 hours and 99% the total Handover request    	processing time should be less than 0.01 second.
Python file will store the numbers and when we run latest.py, it will plot a graphs to verify Handover request processing time.
	
   ![tmpedit](https://user-images.githubusercontent.com/93578898/155994366-67cb4dea-cd4f-4521-a129-34b39d848c7f.PNG)

	
7. Validating the latency measurement
   
    Latency measurements are deduced based on Handover request processing time and the expectation is to be less than 0.01 second. Towards it the user has to check UE Handover request and graphs will be generated to verify Handover request processing time, by running the latest.py file.
      
    Latest.py will generate HO processing time,QueueSize, nUser, RSRP graphs. 
    HOprocessingtime graph shows Handover request processing time for python, it should be in range less than 0.01 second. Here sample index is number of time the Handover request initiated, it's sequence number of control requests for Handover we need to check timing from start to end.
    QueueSize graph shows queue length vs the sequence number of control requests. Here sample index is the number of control requests. Both the graphs are used to analyze the data	
    ![HOprocesstime_1](https://github.com/intel-innersource/applications.services.smart-edge-open.test-validation/assets/93578898/bbec4eea-da71-4da9-b9d2-18381c61cec4)
    ![QueueSize](https://github.com/intel-innersource/applications.services.smart-edge-open.test-validation/assets/93578898/7f623adf-b138-4020-a24c-a7351f55eebf)

## ITP/RI/ICMAH/13: Verify E2E Latency measurement of CMxApp meets the ORAN KPI using Python

### Test Summary

Verify E2E Latency measurement of Intelligent Connection Management for Automated Handover RI meets the ORAN KPI using Python. 99% of occurences the Handover request processing time should be in range less than 0.1 to 0.15 seconds.

### Prerequisites
  
Start RI Installation (./edgesoftware install) [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)

### Test Steps

Step 1. Uninstall the RI package by using the below command.

Note: For verifying latency measurement using python method, need to modify the parameters. so uninstall the edgesoftware and do the changes.
	
  ```shell
  ./edgesoftware uninstall -a
  ```
```shell	
smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware uninstall -a
Components to be uninstalled are :['Intelligent_Connection_Management_for_Automated_Handover']
Uninstalling Intelligent_Connection_Management_for_Automated_Handover
Uninstalling CM Xapp This might take upto 5 minutes.
Cleaning up CM Xapp                                [............                                      ]  25%
Successfully removed cm xapp from machine
Cleaning up CM Xapp                                [.........................                         ]  50%  00:00:11
Successfully removed sdran from machine
Cleaning up CM Xapp                                [.....................................             ]  75%  00:00:07
Successfully removed network policy from machine
Cleaning up CM Xapp                                [..................................................] 100%
Successfully uninstalled Intelligent_Connection_Management_for_Automated_Handover took 30.87 seconds
Uninstall Finished
+--------------------------+----------------------------------------------------------+---------+
|            Id            |                          Module                          |  Status |
+--------------------------+----------------------------------------------------------+---------+
| 61d80982d534850021b1422d | Intelligent Connection Management for Automated Handover | SUCCESS |
+--------------------------+----------------------------------------------------------+---------+
```
   
Step 2. Set the following parameters from below path
```shell
Intelligent_Connection_Management/Intelligent_Connection_Management_for_Automated_Handover_2.0.0/Intelligent_Connection_Management_for_Automated_Handover/CM-Xapp/cm- xapp/values.yaml
```
```shell	
parallelLoop=false --qValue=0 --preprocessing=true 
```
	
Step 3. Reinstall the Intelligent Connection Management for Automated Handover RI with valid product key.

1. Run the command below to install the Reference Implementation:
   
  ```shell
  $ ./edgesoftware install
  ```

2. During the installation, user shall be prompted for the Product Key. The Product Key is contained in the email you received from Intel confirming your download.
 
    ```shell
    smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ ./edgesoftware install
    Please enter the Product Key. The Product Key is contained in the email you received from Intel confirming your download:  <Product-Key>
    Starting the setup...
    ESB CLI version: 2021.4
    Target OS: Ubuntu 20.04
    Python version: 3.8.10
    Checking Internet connection
    Connected to the Internet
    Validating product key
    Successfully validated Product Key
    Checking for prerequisites
    ```

    ```shell
    --------Succesfuly installed prerequisites--------
    All dependencies met
    -------------------SYSTEM INFO--------------------
    Package Name: Intelligent Connection Management for Automated Handover 2.0.0
    Product Name: Dell Inc. PowerEdge R750
    CPU SKU: Intel(R) Xeon(R) Gold 6338N CPU @ 2.20GHz
    Memory Size: 504 GB
    Operating System: Ubuntu 20.04.2 LTS
    Kernel Version: 5.13.0-27-generic
    Accelerator: None
    CPU Utilization: 1.2%
    Available Disk Space: 433 GB
    Starting installation
    Downloading modules...
    Downloading component esb_common
    100%|██████████████████████████████████████████████████████████████████████████████████████████████████████| 44.0M/44.0M [00:43<00:00, 1.01MiB/s]
    Module validation passed for 6022bd8ccc7449002afdbedd
    Successfully downloaded module esb_common
    Downloading component Intelligent_Connection_Management_for_Automated_Handover
    100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 1.95M/1.95M [00:02<00:00, 951kiB/s]
    Module validation passed for 619b8bceff6f230021e4409e
    Successfully downloaded module Intelligent_Connection_Management_for_Automated_Handover
    Downloading modules completed...
    Installing shared module 'esb_common'
    Unzipping the shared module 'esb_common'...
    running install
    running bdist_egg
    running egg_info
    creating esb_common.egg-info
    writing esb_common.egg-info/PKG-INFO
    writing dependency_links to esb_common.egg-info/dependency_links.txt
    writing top-level names to esb_common.egg-info/top_level.txt
    writing manifest file 'esb_common.egg-info/SOURCES.txt'
    reading manifest file 'esb_common.egg-info/SOURCES.txt'
    writing manifest file 'esb_common.egg-info/SOURCES.txt'
    installing library code to build/bdist.linux-x86_64/egg
    ```

    ```shell
    creating build
    creating build/bdist.linux-x86_64
    creating build/bdist.linux-x86_64/egg
    creating build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    copying esb_common.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
    zip_safe flag not set; analyzing archive contents...
    creating dist
    creating 'dist/esb_common-0.1-py3.8.egg' and adding 'build/bdist.linux-x86_64/egg' to it
    removing 'build/bdist.linux-x86_64/egg' (and everything under it)
    Processing esb_common-0.1-py3.8.egg
    Copying esb_common-0.1-py3.8.egg to /usr/local/lib/python3.8/dist-packages
    Adding esb-common 0.1 to easy-install.pth file

    Installed /usr/local/lib/python3.8/dist-packages/esb_common-0.1-py3.8.egg
    Processing dependencies for esb-common==0.1
    Finished processing dependencies for esb-common==0.1
    Successfully installed shared module 'esb_common'.
    Installing Lanternrock SDK
    Successfully installed Lanternrock SDK.
    Unzipping the module Intelligent_Connection_Management_for_Automated_Handover...
    Modules to be installed by package are ['Intelligent_Connection_Management_for_Automated_Handover']
    Installing Intelligent_Connection_Management_for_Automated_Handover
    Verifying SE Node (xx.xxx.xxx.xxx)                  [..................................................] 100%


    Before installing freshly, deleting partially installed pods if any ...
    Uninstalling CM Xapp This might take upto 5 minutes.
    Cleaning up CM Xapp quietly                        [..................................................] 100%
    ```
  
4. When the installation is complete, you shall see the message **Installation of package complete** with the installation status for each module.

    ```shell
    CM Xapp installation started. This might take upto 1 mins
    Installing CM Xapp                                 [..................................................] 100%
    Successfully installed: CM Xapp

    Verifying CM Xapp installation in (xx.xxx.xxx.xxx)  [..................................................] 100%
    Successfully installed Intelligent_Connection_Management_for_Automated_Handover took 13 minutes 58.31 seconds
    Installation of package complete
    ***Recommended to reboot system after installation***
    +--------------------------+----------------------------------------------------------+---------+
    |            Id            |                          Module                          |  Status |
    +--------------------------+----------------------------------------------------------+---------+
    | 619b8bceff6f230021e4409e | Intelligent Connection Management for Automated Handover | SUCCESS |
    +--------------------------+----------------------------------------------------------+---------+
    ```
**Note:** Installation logs are available at path: /var/log/esb-cli/Intelligent_Connection_Management_for_Automated_Handover_2.0.0/Intelligent_Connection_Management_for_Automated_Handover/install.log
	
Step 5. Download the python package from the below repo

  ```shell	
  git clone https://github.com/intel-innersource/networking.wireless.oran-ric.xapp-icmah/blob/master/ORAN_sim_ONF/latest.py
  ```	
Step 6. Verify the CMxApp pod status with the command below
	
  ```shell
  smartedge-open@ubuntu-4b70b7ba43101:~/Intelligent_Connection_Management$ kubectl -n smartedge-apps get pod
  NAME                             READY   STATUS    RESTARTS   AGE
  cm-xapp-58557c8f56-sp2kf         2/2     Running   0          5h
  onos-cli-764d9697fb-qrgsd        1/1     Running   0          5h
  onos-consensus-store-0           1/1     Running   0          5h
  onos-e2t-df496c8cd-tngrh         3/3     Running   0          5h
  onos-topo-79f7c5c54d-q8972       3/3     Running   0          5h
  onos-uenib-6f7466c87f-r97pj      3/3     Running   0          5h
  ran-simulator-84f849f6d6-hxf29   1/1     Running   0          5h
  ```
Step 7. Verify  Handover request processing time with CMxApp and RAN simulator pod from 'smartedge-apps' namespace 

   Note: Minimum active UE number should be 50 and maximum number of UE 100. The total running time will be more than 4 hours and 99% the total Handover request processing time should be less than  0.1 to 0.15 seconds. 
         
  ```shell
    smartedge-open@ubuntu-4b70b7ba43:~$ kubectl logs cm-xapp-58557c8f56-sp2kf -n smartedge-apps -c cm-xapp
  ```
```shell
02/24/2022 11:00:40 AM Number of Cells: 7
02/24/2022 11:00:40 AM Queue len: 19
02/24/2022 11:00:40 AM Calling control req no 1 for UE : 2852134 Serving cell: 13842601454c001 target_cell 13842601454c002
02/24/2022 11:00:40 AM Number of Active UEs: 19
02/24/2022 11:00:40 AM Number of total UEs: 71
02/24/2022 11:00:40 AM HO processing time: 0.0503 seconds
02/24/2022 11:00:40 AM Queue len: 17
02/24/2022 11:00:40 AM Calling control req no 2 for UE : 3935705 Serving cell: 13842601454c004 target_cell 13842601454c003
02/24/2022 11:00:40 AM Number of Active UEs: 19
02/24/2022 11:00:40 AM Number of total UEs: 71
02/24/2022 11:00:40 AM HO processing time: 0.0445 seconds
02/24/2022 11:00:40 AM Queue len: 14
02/24/2022 11:00:41 AM Calling control req no 3 for UE : 5401234 Serving cell: 13842601454c005 target_cell 13842601454c006
02/24/2022 11:00:41 AM Number of Active UEs: 19
02/24/2022 11:00:41 AM Number of total UEs: 71
02/24/2022 11:00:41 AM HO processing time: 0.0521 seconds
02/24/2022 11:00:41 AM Queue len: 11
02/24/2022 11:00:41 AM Queue len: 10
02/24/2022 11:00:41 AM Calling control req no 4 for UE : 2164921 Serving cell: 13842601454c007 target_cell 13842601454c006
02/24/2022 11:00:41 AM Number of Active UEs: 19
02/24/2022 11:00:41 AM Number of total UEs: 71
02/24/2022 11:00:41 AM HO processing time: 0.0555 seconds
02/24/2022 11:00:41 AM Queue len: 8
02/24/2022 11:00:41 AM Queue len: 7
02/24/2022 11:00:41 AM Calling control req no 5 for UE : 5984583 Serving cell: 13842601454c001 target_cell 13842601454c002
02/24/2022 11:00:41 AM Number of Active UEs: 19
02/24/2022 11:00:41 AM Number of total UEs: 71
02/24/2022 11:00:41 AM HO processing time: 0.0633 seconds
02/24/2022 11:00:41 AM Queue len: 5
02/24/2022 11:00:41 AM Calling control req no 6 for UE : 7319340 Serving cell: 13842601454c006 target_cell 13842601454c001
02/24/2022 11:00:41 AM Number of Active UEs: 19
02/24/2022 11:00:41 AM Number of total UEs: 71
02/24/2022 11:00:41 AM HO processing time: 0.0354 seconds
02/24/2022 11:00:41 AM Queue len: 3
02/24/2022 11:00:41 AM Calling control req no 7 for UE : 3997593 Serving cell: 13842601454c004 target_cell 13842601454c003
02/24/2022 11:00:41 AM Number of Active UEs: 19
02/24/2022 11:00:41 AM Number of total UEs: 71
02/24/2022 11:00:41 AM HO processing time: 0.0352 seconds
02/24/2022 11:00:41 AM Queue len: 2
02/24/2022 11:00:41 AM Queue len: 1
02/24/2022 11:00:42 AM Queue len: 1
02/24/2022 11:00:42 AM Queue len: 1
02/24/2022 11:00:42 AM Queue len: 1
02/24/2022 11:00:42 AM Queue len: 1
02/24/2022 11:00:43 AM Queue len: 1
02/24/2022 11:00:43 AM Queue len: 1
02/24/2022 11:00:43 AM Queue len: 1
02/24/2022 11:00:43 AM Queue len: 1
02/24/2022 11:00:44 AM Queue len: 1
02/24/2022 11:00:45 AM Calling control req no 8 for UE : 1218889 Serving cell: 13842601454c001 target_cell 13842601454c002
02/24/2022 11:00:45 AM Number of Active UEs: 20
02/24/2022 11:00:45 AM Number of total UEs: 72
02/24/2022 11:00:45 AM HO processing time: 0.0467 seconds
```

Step 8. After latency measurement process, execute the following command to get xapp log
  
```shell
smartedge-open@ubuntu-4b70b7ba43:~/Intelligent_Connection_Management$ kubectl -n smartedge-apps exec -it cm-xapp-58557c8f56-sp2kf  -- bash
Defaulted container "cm-xapp" out of: cm-xapp, onos-proxy
openvino@cm-xapp-77d4995c8d-98mw7:~$ ls
HOprocess.py  __pycache__     cDQNandGNN.py  databaseProcess.py  oranHandOverEnv.py       queueManagement.py  xApp_ONF.py
OpenVINO      cActivation.py  csrc           onos_sdk_client.so  pygo_mediation_layer.py  weights.data        xapp.log
```
Step 9. Verify the xapp log file name using below command and dump logs as log.txt
      
```shell
smartedge-open@ubuntu-4b70b7ba43:/home/smartedge-open/dek/tmp1$ kubectl cp smartedge-apps/cm-xapp-58557c8f56-sp2kf:/home/openvino/xapp.log ./log.txt
Defaulted container "cm-xapp" out of: cm-xapp, onos-proxy
smartedge-open@ubuntu-4b70b7ba43:/home/smartedge-open/dek/tmp1$ ls
log.txt
```
Step 10. Execute the following command from Python path
	
 ```shell
 smartedge-open@ubuntu-4b70b7ba43:/home/smartedge-open/dek/tmp1:$ python3 latest.py
 ```
Note: Minimum active UE number should be 50 and maximum number of UE is 140. The total running time will be more than 4 hours and 99% the total Handover request processing time should be less than  0.1 to 0.15 seconds.
         Python file will store the numbers and when we run latest.py it will plot a graphs to verify Handover request processing time.
	
![tmp1edit](https://user-images.githubusercontent.com/93578898/155994678-8d42b304-8ed7-44f8-bc58-7de2848d188f.PNG)

Step 11. Validating the latency measurement
   
Latency measurements are deduced based on Handover request processing time and the expectation is to be less than 0.1 second. Towards it the user has to check UE Handover request and graphs will be generated to verify Handover request processing time, by running the latest.py file.
	
Latest.py will generate HO processing time,QueueSize, nUser, RSRP graphs. 
HOprocessingtime graph shows Handover request processing time for python, it should be in range less than 0.1 to 0.15 seconds. Here sample index is number of time the Handover request initiated, it's sequence number of control requests for Handover we need to check timing from start to end.
QueueSize graph shows queue length vs the sequence number of control requests. Here sample index is the number of control requests. Both the graphs are used to analyze the data
	
![HOprocesstime](https://github.com/intel-innersource/applications.services.smart-edge-open.test-validation/assets/93578898/c8056fd7-fca0-44ba-a55f-1873fa6568a7)![QueueSize](https://github.com/intel-innersource/applications.services.smart-edge-open.test-validation/assets/93578898/fee5b0d2-a475-485b-b2fc-22fc2b82edef)

## ITP/RI/ICMAH/14: Verify CMxApp deployment is per the platform capabilities advertised by NFD feature.

### Test Summary

Verify the CM-xApp application deployment is per the node selection criteria advertised by NFD.<br>
Node selector labels for ICMAH RI are:<br>
feature.node.kubernetes.io/cpu-cpuid.AVX512VNNI=true <br>
feature.node.kubernetes.io/system-os_release.ID=ubuntu <br>
feature.node.kubernetes.io/system-os_release.VERSION_ID=20.04 <br>
feature.node.kubernetes.io/system-os_release.VERSION_ID.major=20 <br>
feature.node.kubernetes.io/system-os_release.VERSION_ID.minor=04 <br>

### Prerequisites
  
Start RI Installation (./edgesoftware install) [ITP/RI/ICMAH/01: Intelligent Connection Management for Automated Handover RI Installation and Verification](#itpriicmah01-Intelligent-Connection-Management-for-Automated-Handover-RI-Installation-and-Verification)

### Test Steps

1. If ICMAH RI is installed, running the following command should prompt below output

```shell
smartedge-open@ubuntu-4b70b7ba43:~$ kubectl -n smartedge-apps get pod
NAME                             READY   STATUS    RESTARTS   AGE
cm-xapp-cbb7b9499-gtjfp          2/2     Running   0          16h
onos-cli-764d9697fb-2fltz        1/1     Running   0          20h
onos-consensus-store-0           1/1     Running   0          20h
onos-e2t-df496c8cd-hdgcr         3/3     Running   0          20h
onos-topo-79f7c5c54d-d4s9k       3/3     Running   0          20h
onos-uenib-6f7466c87f-v2jgm      3/3     Running   0          20h
ran-simulator-84f849f6d6-fk49t   1/1     Running   0          20h
```

2. Verify NFD feature by describing any ICMAH application pod. Node-selectors details should promt as below
	
```shell
smartedge-open@ubuntu-4b70b7ba43:~$ kubectl describe pod cm-xapp-cbb7b9499-gtjfp -n smartedge-apps
Name:         cm-xapp-cbb7b9499-gtjfp
Namespace:    smartedge-apps
Priority:     0
Node:         ubuntu-4b70b7ba43/xx.xx.xxx.xx
Start Time:   Thu, 03 Mar 2022 18:14:45 +0530
Labels:       pod-template-hash=cbb7b9499
              service=cm-xapp
Annotations:  cni.projectcalico.org/containerID: c5606711fd2f933ad290cc046f84655518d396cab7c5effe9afcf1e195bdf97b
              cni.projectcalico.org/podIP: 10.245.78.241/32
              cni.projectcalico.org/podIPs: 10.245.78.241/32
              proxy.onosproject.org/inject: true
              proxy.onosproject.org/status: injected
Status:       Running
IP:           xx.xxx.xxx.xxx
IPs:
  IP:           xx.xxxx.xxx.xxx
Controlled By:  ReplicaSet/cm-xapp-cbb7b9499
Containers:
  cm-xapp:
    Container ID:  docker://c68178789f766b857521b4ed33cc9606893016d8394c484d29aa235269c1f200
    Image:         smartedge/intelligent_connection_management_app_private:2.0.1
    Image ID:      docker-pullable://smartedge/intelligent_connection_management_app_private@sha256:3a2d86b48664605d7ec898d08c94357049195bbcd4b44237ac4a378f22e83033
    Port:          <none>
    Host Port:     <none>
    Command:
      python3
      xApp_ONF.py
    Args:
      --logLevel=info
      --initiationTime=120
      --cellIndLimit=1000
      --file=
      --parallelLoop=true
      --qValue=10
      --preprocessing=false
    State:          Running
      Started:      Thu, 03 Mar 2022 18:14:58 +0530
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-zzvbv (ro)
  onos-proxy:
    Container ID:   docker://abcb2ee925a1b029ee47e001999365ec7a16fd3fe390dfe824ecf72f9daad3c9
    Image:          onosproject/onos-proxy:latest
    Image ID:       docker-pullable://onosproject/onos-proxy@sha256:69bf6e4bfc5205c7a93469e2f69be6e79df185b756d84e74138aafeb90ff381b
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Thu, 03 Mar 2022 18:15:22 +0530
    Ready:          True
    Restart Count:  0
    Environment:
      ONOS_PROXY_NAMESPACE:  smartedge-apps (v1:metadata.namespace)
      ONOS_PROXY_NAME:       cm-xapp-cbb7b9499-gtjfp (v1:metadata.name)
      ONOS_PROXY_NODE:        (v1:spec.nodeName)
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-zzvbv (ro)
Conditions:
  Type              Status
  AtomixReady       True
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kube-api-access-zzvbv:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              feature.node.kubernetes.io/cpu-cpuid.AVX512VNNI=true
                             feature.node.kubernetes.io/system-os_release.ID=ubuntu
                             feature.node.kubernetes.io/system-os_release.VERSION_ID=20.04
                             feature.node.kubernetes.io/system-os_release.VERSION_ID.major=20
                             feature.node.kubernetes.io/system-os_release.VERSION_ID.minor=04
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  20h   default-scheduler  Successfully assigned smartedge-apps/cm-xapp-cbb7b9499-gtjfp to ubuntu-4b70b7ba43101
  Normal  Pulled     20h   kubelet            Container image "smartedge/intelligent_connection_management_app_private:2.0.1" already present on machine
  Normal  Created    20h   kubelet            Created container cm-xapp
  Normal  Started    20h   kubelet            Started container cm-xapp
  Normal  Pulling    20h   kubelet            Pulling image "onosproject/onos-proxy:latest"
  Normal  Pulled     20h   kubelet            Successfully pulled image "onosproject/onos-proxy:latest" in 24.209147507s
  Normal  Created    20h   kubelet            Created container onos-proxy
  Normal  Started    20h   kubelet            Started container onos-proxy
```shell
